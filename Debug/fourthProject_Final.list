
fourthProject_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002604  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002864  08002864  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002864  08002864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800286c  0800286c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  080028e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080028e4  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000bcd9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000a05f  00000000  00000000  0002bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8c  00000000  00000000  00035dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00037968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000864a0  00000000  00000000  00038058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000067c0  00000000  00000000  000be4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000700  00000000  00000000  000c4cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000165f1  00000000  00000000  000c53b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000db9a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001844  00000000  00000000  000db9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800278c 	.word	0x0800278c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800278c 	.word	0x0800278c

080001e0 <SVC_Handler>:
  .thumb //Practically this only matters to the CPU, but it ensures that the correct types of instructions get included

  .global SVC_Handler //We need to indicate to the linker that this function exists
  .thumb_func //We need to ensure that the address of our interrupt function is properly aligned or we hard fault. a LOT
  SVC_Handler: //our function name
	TST LR, 4 //TeST the 3rd bit in LR (4 is 0b1000, so its 3rd bit is 1)
 80001e0:	f01e 0f04 	tst.w	lr, #4
	ITE EQ //If Then Equal
 80001e4:	bf0c      	ite	eq
	MRSEQ R0, MSP //If the third bit is set, we are using MSP. Set us up to use that
 80001e6:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP //Otherwise, use PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main //Go to the C function, because screw assembly
 80001ee:	f000 baad 	b.w	800074c <SVC_Handler_Main>

080001f2 <runFirstThread>:

  .global runFirstThread //Running the first thread requires some special consideration, so it is its own function
  .thumb_func
  runFirstThread:
  	//Restore MSP since we have two things on there that won't go away
  	POP {R7}
 80001f2:	bc80      	pop	{r7}
  	POP {R7}
 80001f4:	bc80      	pop	{r7}

  	//Get ready for PSP
  	MRS R0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
  	MOV LR, #0xFFFFFFFD
 80001fa:	f06f 0e02 	mvn.w	lr, #2
  	LDMIA R0!,{R4-R11}
 80001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  	MSR PSP, R0
 8000202:	f380 8809 	msr	PSP, r0
  	BX LR
 8000206:	4770      	bx	lr

08000208 <PendSV_Handler>:
	//Restore MSP since we have two things on there that won't go away
	//POP {R7}
	//POP {R7}

	//Perform the switch
	MRS R0, PSP
 8000208:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!,{R4-R11}
 800020c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BL osSched
 8000210:	f000 fa78 	bl	8000704 <osSched>
	MRS R0, PSP
 8000214:	f3ef 8009 	mrs	r0, PSP
	MOV LR, #0xFFFFFFFD
 8000218:	f06f 0e02 	mvn.w	lr, #2
	LDMIA R0!,{R4-R11}
 800021c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000220:	f380 8809 	msr	PSP, r0
	BX LR
 8000224:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <getNewThreadStack>:
	Cortex (and is why PRESERVE8 is in our assembly file)
*/
uint32_t* getNewThreadStack()
{
	//generate the offset and return NULL if too many stacks are allocated
	int offset = (++stacksAllocated)*THREAD_STACK_SIZE; //automatically increments
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <getNewThreadStack+0x1c>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	3001      	adds	r0, #1
 80005da:	6018      	str	r0, [r3, #0]
 80005dc:	02c0      	lsls	r0, r0, #11
	if(offset >= STACK_POOL_SIZE)
 80005de:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
	return (uint32_t*)*MSR_Original;
 80005e2:	bfbd      	ittte	lt
 80005e4:	2300      	movlt	r3, #0
		return (uint32_t*)0;

	uint32_t MSPOriginal = (uint32_t)getMSPInitialLocation();

	uint32_t newStackLocation = MSPOriginal-offset;
 80005e6:	681b      	ldrlt	r3, [r3, #0]
 80005e8:	1a18      	sublt	r0, r3, r0
		return (uint32_t*)0;
 80005ea:	2000      	movge	r0, #0
	if(newStackLocation%EIGHT_BYTE_ALIGN)
		newStackLocation+=FIX_ALIGNMENT;
	return (uint32_t*)(MSPOriginal-offset);
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000094 	.word	0x20000094

080005f4 <osKernelInit>:
//Sets up the kernel's internal data structures
void osKernelInit()
{
	//set the priority of PendSV to almost the weakest
	SHPR3 |= 0xFE << 16;
	SHPR3 |= 0xFFU << 24; //Set the priority of SysTick to be the weakest
 80005f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80005f8:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80005fc:	ea6f 33c3 	mvn.w	r3, r3, lsl #15
 8000600:	ea6f 33d3 	mvn.w	r3, r3, lsr #15
 8000604:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20

	SHPR2 |= 0xFDU << 24; //Set the priority of SVC the be the strongest of the three
 8000608:	f8d2 3d1c 	ldr.w	r3, [r2, #3356]	; 0xd1c
 800060c:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 8000610:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
	curThread = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	4a02      	ldr	r2, [pc, #8]	; (8000620 <osKernelInit+0x2c>)
 8000618:	6013      	str	r3, [r2, #0]
	stacksAllocated = 0;
 800061a:	4a02      	ldr	r2, [pc, #8]	; (8000624 <osKernelInit+0x30>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	4770      	bx	lr
 8000620:	2000008c 	.word	0x2000008c
 8000624:	20000094 	.word	0x20000094

08000628 <osKernelStart>:

//start the kernel via a system call
void osKernelStart()
{
	kernelStarted = true;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <osKernelStart+0xc>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
	__asm("SVC #0"); //asm is not subject to preprocessor macros
 800062e:	df00      	svc	0
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000090 	.word	0x20000090

08000638 <osInitializeThreadStack>:

//initializes a stack. Now that there are two createThread functions, it makes sense to compartmentalize
uint32_t* osInitializeThreadStack(void (*fcn_ptr)(void*),void* args)
{
 8000638:	b538      	push	{r3, r4, r5, lr}
 800063a:	4604      	mov	r4, r0
 800063c:	460d      	mov	r5, r1
	//get a stack pointer
		uint32_t* stackPtr = getNewThreadStack();
 800063e:	f7ff ffc9 	bl	80005d4 <getNewThreadStack>
		if(stackPtr == 0)
 8000642:	4603      	mov	r3, r0
 8000644:	b338      	cbz	r0, 8000696 <osInitializeThreadStack+0x5e>
			return 0; //No stacks!

		//Otherwise, rock this
		*(--stackPtr) = 1<<24; //xpsr
 8000646:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800064a:	f840 2c04 	str.w	r2, [r0, #-4]
		*(--stackPtr) = (uint32_t)fcn_ptr;
 800064e:	f840 4c08 	str.w	r4, [r0, #-8]
		*(--stackPtr) = 0xE;
 8000652:	220e      	movs	r2, #14
 8000654:	f840 2c0c 	str.w	r2, [r0, #-12]
		*(--stackPtr) = 0xC;
 8000658:	210c      	movs	r1, #12
 800065a:	f840 1c10 	str.w	r1, [r0, #-16]
		*(--stackPtr) = 0x3;
 800065e:	2103      	movs	r1, #3
 8000660:	f840 1c14 	str.w	r1, [r0, #-20]
		*(--stackPtr) = 0x2;
 8000664:	2102      	movs	r1, #2
 8000666:	f840 1c18 	str.w	r1, [r0, #-24]
		*(--stackPtr) = 0x1;
 800066a:	2101      	movs	r1, #1
 800066c:	f840 1c1c 	str.w	r1, [r0, #-28]
		*(--stackPtr) = (uint32_t)args; //This is R0
 8000670:	f840 5c20 	str.w	r5, [r0, #-32]

		*(--stackPtr) = 0xE;
 8000674:	f840 2c24 	str.w	r2, [r0, #-36]
		*(--stackPtr) = 0xE;
 8000678:	f840 2c28 	str.w	r2, [r0, #-40]
		*(--stackPtr) = 0xE;
 800067c:	f840 2c2c 	str.w	r2, [r0, #-44]
		*(--stackPtr) = 0xE;
 8000680:	f840 2c30 	str.w	r2, [r0, #-48]
		*(--stackPtr) = 0xE;
 8000684:	f840 2c34 	str.w	r2, [r0, #-52]
		*(--stackPtr) = 0xE;
 8000688:	f840 2c38 	str.w	r2, [r0, #-56]
		*(--stackPtr) = 0xE;
 800068c:	f840 2c3c 	str.w	r2, [r0, #-60]
		*(--stackPtr) = 0xE;
 8000690:	3840      	subs	r0, #64	; 0x40
 8000692:	f843 2c40 	str.w	r2, [r3, #-64]

		return stackPtr;

}
 8000696:	bd38      	pop	{r3, r4, r5, pc}

08000698 <osCreateThread>:

//Sets up the thread stack to run
bool osCreateThread(void (*fcn_ptr)(void*),void* args)
{
 8000698:	b510      	push	{r4, lr}
 800069a:	4604      	mov	r4, r0
	//get a stack pointer
	uint32_t* stackPtr = osInitializeThreadStack(fcn_ptr,args);
 800069c:	f7ff ffcc 	bl	8000638 <osInitializeThreadStack>
	if(stackPtr == 0)
 80006a0:	b170      	cbz	r0, 80006c0 <osCreateThread+0x28>
 80006a2:	4601      	mov	r1, r0
		return false; //No stacks!

	threadArray[stacksAllocated-1].fcn = fcn_ptr;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <osCreateThread+0x2c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <osCreateThread+0x30>)
 80006ac:	0118      	lsls	r0, r3, #4
 80006ae:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80006b2:	605c      	str	r4, [r3, #4]
	threadArray[stacksAllocated-1].sp = stackPtr;
 80006b4:	5011      	str	r1, [r2, r0]
	threadArray[stacksAllocated-1].deadline = ROUND_ROBIN_TIMEOUT;
 80006b6:	2205      	movs	r2, #5
 80006b8:	609a      	str	r2, [r3, #8]
	threadArray[stacksAllocated-1].thread_runtime = ROUND_ROBIN_TIMEOUT;
 80006ba:	60da      	str	r2, [r3, #12]

	return true;
 80006bc:	2001      	movs	r0, #1
}
 80006be:	bd10      	pop	{r4, pc}
		return false; //No stacks!
 80006c0:	2000      	movs	r0, #0
 80006c2:	e7fc      	b.n	80006be <osCreateThread+0x26>
 80006c4:	20000094 	.word	0x20000094
 80006c8:	20000098 	.word	0x20000098

080006cc <osCreateThreadWithDeadline>:


//Sets up the thread stack to run
bool osCreateThreadWithDeadline(void (*fcn_ptr)(void*),void* args,uint32_t deadlineMS)
{
 80006cc:	b538      	push	{r3, r4, r5, lr}
 80006ce:	4605      	mov	r5, r0
 80006d0:	4614      	mov	r4, r2
	//get a stack pointer
		uint32_t* stackPtr = osInitializeThreadStack(fcn_ptr,args);
 80006d2:	f7ff ffb1 	bl	8000638 <osInitializeThreadStack>
		if(stackPtr == 0)
 80006d6:	b168      	cbz	r0, 80006f4 <osCreateThreadWithDeadline+0x28>
 80006d8:	4601      	mov	r1, r0
			return false; //No stacks!

	threadArray[stacksAllocated-1].fcn = fcn_ptr;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <osCreateThreadWithDeadline+0x2c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <osCreateThreadWithDeadline+0x30>)
 80006e2:	0118      	lsls	r0, r3, #4
 80006e4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80006e8:	605d      	str	r5, [r3, #4]
	threadArray[stacksAllocated-1].sp = stackPtr;
 80006ea:	5011      	str	r1, [r2, r0]
	threadArray[stacksAllocated-1].deadline = deadlineMS;
 80006ec:	609c      	str	r4, [r3, #8]
	threadArray[stacksAllocated-1].thread_runtime = deadlineMS;
 80006ee:	60dc      	str	r4, [r3, #12]

	return true;
 80006f0:	2001      	movs	r0, #1
}
 80006f2:	bd38      	pop	{r3, r4, r5, pc}
			return false; //No stacks!
 80006f4:	2000      	movs	r0, #0
 80006f6:	e7fc      	b.n	80006f2 <osCreateThreadWithDeadline+0x26>
 80006f8:	20000094 	.word	0x20000094
 80006fc:	20000098 	.word	0x20000098

08000700 <osYield>:
void osYield()
{
	__asm("SVC #1");
 8000700:	df01      	svc	1
}
 8000702:	4770      	bx	lr

08000704 <osSched>:

void osSched()
{
	//Don't do anything if there is only one thread running
	if(stacksAllocated > 1)
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <osSched+0x3c>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	2a01      	cmp	r2, #1
 800070a:	dd17      	ble.n	800073c <osSched+0x38>
{
 800070c:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800070e:	f3ef 8109 	mrs	r1, PSP
	{
		//Save where we restore PSP to later on
		threadArray[curThread].sp = (uint32_t*)(__get_PSP() - 8*4);
 8000712:	4c0c      	ldr	r4, [pc, #48]	; (8000744 <osSched+0x40>)
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <osSched+0x44>)
 8000718:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 800071c:	3920      	subs	r1, #32
 800071e:	f840 100c 	str.w	r1, [r0, ip]

		curThread = (curThread+1)%stacksAllocated;
 8000722:	3301      	adds	r3, #1
 8000724:	fb93 f1f2 	sdiv	r1, r3, r2
 8000728:	fb02 3311 	mls	r3, r2, r1, r3
 800072c:	6023      	str	r3, [r4, #0]
		__set_PSP((uint32_t)threadArray[curThread].sp);
 800072e:	011b      	lsls	r3, r3, #4
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000730:	58c3      	ldr	r3, [r0, r3]
 8000732:	f383 8809 	msr	PSP, r3
	}
}
 8000736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000094 	.word	0x20000094
 8000744:	2000008c 	.word	0x2000008c
 8000748:	20000098 	.word	0x20000098

0800074c <SVC_Handler_Main>:

//This is super duper not exposed to the user, so it's not in kernel.h
void SVC_Handler_Main( unsigned int *svc_args )
{
 800074c:	b508      	push	{r3, lr}
  //unsigned int svc_number;
  uint8_t *pInstruction = (uint8_t*)(svc_args[6]);
  pInstruction -= 2;
  uint32_t svc_number = *pInstruction;
 800074e:	6983      	ldr	r3, [r0, #24]
 8000750:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  /*
  * Stack contains:
  * r0, r1, r2, r3, r12, r14, the return address and xPSR
  * First argument (r0) is svc_args[0]
  */
  switch(svc_number)
 8000754:	b113      	cbz	r3, 800075c <SVC_Handler_Main+0x10>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d00a      	beq.n	8000770 <SVC_Handler_Main+0x24>
    	//contextSwitch();
    	break;
    default:    /* unknown SVC */
      break;
  }
}
 800075a:	bd08      	pop	{r3, pc}
    	__set_PSP((uint32_t)threadArray[curThread].sp);
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <SVC_Handler_Main+0x3c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SVC_Handler_Main+0x40>)
 8000764:	58d3      	ldr	r3, [r2, r3]
 8000766:	f383 8809 	msr	PSP, r3
    	runFirstThread();
 800076a:	f7ff fd42 	bl	80001f2 <runFirstThread>
    	break;
 800076e:	e7f4      	b.n	800075a <SVC_Handler_Main+0xe>
		_ICSR |= 1<<28;
 8000770:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000774:	f8d2 3d04 	ldr.w	r3, [r2, #3332]	; 0xd04
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	f8c2 3d04 	str.w	r3, [r2, #3332]	; 0xd04
		__asm("isb");
 8000780:	f3bf 8f6f 	isb	sy
}
 8000784:	e7e9      	b.n	800075a <SVC_Handler_Main+0xe>
 8000786:	bf00      	nop
 8000788:	2000008c 	.word	0x2000008c
 800078c:	20000098 	.word	0x20000098

08000790 <print_continuously>:
#include <stdint.h>
#include "kernel.h"

int x = 0;
void print_continuously(void* args)
{
 8000790:	b570      	push	{r4, r5, r6, lr}
	int inArg = *(int*)args;
 8000792:	6806      	ldr	r6, [r0, #0]
	while(1)
	{
		printf("Hello, PC!%d\r\n",inArg+x);
 8000794:	4d03      	ldr	r5, [pc, #12]	; (80007a4 <print_continuously+0x14>)
 8000796:	4c04      	ldr	r4, [pc, #16]	; (80007a8 <print_continuously+0x18>)
 8000798:	6829      	ldr	r1, [r5, #0]
 800079a:	4431      	add	r1, r6
 800079c:	4620      	mov	r0, r4
 800079e:	f001 f867 	bl	8001870 <iprintf>
	while(1)
 80007a2:	e7f9      	b.n	8000798 <print_continuously+0x8>
 80007a4:	20000118 	.word	0x20000118
 80007a8:	080027a4 	.word	0x080027a4

080007ac <print_again>:
		//osYield();
	}
}

void print_again(void* args)
{
 80007ac:	b508      	push	{r3, lr}
	while(1)
	{
		x++;
 80007ae:	4c03      	ldr	r4, [pc, #12]	; (80007bc <print_again+0x10>)
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	6023      	str	r3, [r4, #0]
		osYield();
 80007b6:	f7ff ffa3 	bl	8000700 <osYield>
	while(1)
 80007ba:	e7f9      	b.n	80007b0 <print_again+0x4>
 80007bc:	20000118 	.word	0x20000118

080007c0 <main>:
	}
}


int main(void)
{
 80007c0:	b500      	push	{lr}
 80007c2:	b083      	sub	sp, #12

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fa0e 	bl	8000be4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f8fc 	bl	80009c4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f000 f966 	bl	8000a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 f94a 	bl	8000a68 <MX_USART2_UART_Init>

  osKernelInit();
 80007d4:	f7ff ff0e 	bl	80005f4 <osKernelInit>
  int x = 47;
 80007d8:	232f      	movs	r3, #47	; 0x2f
 80007da:	9301      	str	r3, [sp, #4]
  osCreateThreadWithDeadline(print_continuously,&x,200);
 80007dc:	22c8      	movs	r2, #200	; 0xc8
 80007de:	a901      	add	r1, sp, #4
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <main+0x34>)
 80007e2:	f7ff ff73 	bl	80006cc <osCreateThreadWithDeadline>
  osCreateThread(print_again,0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <main+0x38>)
 80007ea:	f7ff ff55 	bl	8000698 <osCreateThread>
  osKernelStart();
 80007ee:	f7ff ff1b 	bl	8000628 <osKernelStart>

  //we really should never get here
  while(1){}
 80007f2:	e7fe      	b.n	80007f2 <main+0x32>
 80007f4:	08000791 	.word	0x08000791
 80007f8:	080007ad 	.word	0x080007ad

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b500      	push	{lr}
 80007fe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000800:	2100      	movs	r1, #0
 8000802:	9100      	str	r1, [sp, #0]
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_MspInit+0x3c>)
 8000806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800080c:	645a      	str	r2, [r3, #68]	; 0x44
 800080e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000810:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000814:	9200      	str	r2, [sp, #0]
 8000816:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	9101      	str	r1, [sp, #4]
 800081a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000820:	641a      	str	r2, [r3, #64]	; 0x40
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800082c:	2007      	movs	r0, #7
 800082e:	f000 fa05 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	b003      	add	sp, #12
 8000834:	f85d fb04 	ldr.w	pc, [sp], #4
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b500      	push	{lr}
 800083e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2300      	movs	r3, #0
 8000842:	9303      	str	r3, [sp, #12]
 8000844:	9304      	str	r3, [sp, #16]
 8000846:	9305      	str	r3, [sp, #20]
 8000848:	9306      	str	r3, [sp, #24]
 800084a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800084c:	6802      	ldr	r2, [r0, #0]
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <HAL_UART_MspInit+0x64>)
 8000850:	429a      	cmp	r2, r3
 8000852:	d002      	beq.n	800085a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	b009      	add	sp, #36	; 0x24
 8000856:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	2100      	movs	r1, #0
 800085c:	9101      	str	r1, [sp, #4]
 800085e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000864:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
 800086a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	9102      	str	r1, [sp, #8]
 8000876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000878:	f042 0201 	orr.w	r2, r2, #1
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	a903      	add	r1, sp, #12
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <HAL_UART_MspInit+0x68>)
 8000898:	f000 fa2c 	bl	8000cf4 <HAL_GPIO_Init>
}
 800089c:	e7da      	b.n	8000854 <HAL_UART_MspInit+0x18>
 800089e:	bf00      	nop
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40020000 	.word	0x40020000

080008a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler>

080008aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler>

080008ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler>

080008ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler>

080008b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler>

080008b2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b508      	push	{r3, lr}
	//needed for UART, do not remove
	HAL_IncTick();
 80008b6:	f000 f9af 	bl	8000c18 <HAL_IncTick>

	//decrement timers
	if(kernelStarted)
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <SysTick_Handler+0x3c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b1ab      	cbz	r3, 80008ec <SysTick_Handler+0x38>
	{
		threadArray[curThread].deadline--;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <SysTick_Handler+0x40>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <SysTick_Handler+0x44>)
 80008c6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80008ca:	6893      	ldr	r3, [r2, #8]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	6093      	str	r3, [r2, #8]
		if(threadArray[curThread].deadline == 0)
 80008d0:	b963      	cbnz	r3, 80008ec <SysTick_Handler+0x38>
		{
			threadArray[curThread].deadline = threadArray[curThread].thread_runtime;
 80008d2:	4613      	mov	r3, r2
 80008d4:	68d2      	ldr	r2, [r2, #12]
 80008d6:	609a      	str	r2, [r3, #8]
			//Pend an interrupt to do the context switch
			_ICSR |= 1<<28;
 80008d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80008dc:	f8d2 3d04 	ldr.w	r3, [r2, #3332]	; 0xd04
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	f8c2 3d04 	str.w	r3, [r2, #3332]	; 0xd04
			__asm("isb");
 80008e8:	f3bf 8f6f 	isb	sy
		}
	}


}
 80008ec:	bd08      	pop	{r3, pc}
 80008ee:	bf00      	nop
 80008f0:	20000090 	.word	0x20000090
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	20000098 	.word	0x20000098

080008fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	1e16      	subs	r6, r2, #0
 8000900:	dd07      	ble.n	8000912 <_read+0x16>
 8000902:	460c      	mov	r4, r1
 8000904:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000906:	f3af 8000 	nop.w
 800090a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	42a5      	cmp	r5, r4
 8000910:	d1f9      	bne.n	8000906 <_read+0xa>
  }

  return len;
}
 8000912:	4630      	mov	r0, r6
 8000914:	bd70      	pop	{r4, r5, r6, pc}

08000916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000916:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	1e16      	subs	r6, r2, #0
 800091a:	dd07      	ble.n	800092c <_write+0x16>
 800091c:	460c      	mov	r4, r1
 800091e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000920:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000924:	f000 f83e 	bl	80009a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	42a5      	cmp	r5, r4
 800092a:	d1f9      	bne.n	8000920 <_write+0xa>
  }
  return len;
}
 800092c:	4630      	mov	r0, r6
 800092e:	bd70      	pop	{r4, r5, r6, pc}

08000930 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800093c:	2000      	movs	r0, #0
 800093e:	4770      	bx	lr

08000940 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000940:	2001      	movs	r0, #1
 8000942:	4770      	bx	lr

08000944 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000944:	2000      	movs	r0, #0
 8000946:	4770      	bx	lr

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b508      	push	{r3, lr}
 800094a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <_sbrk+0x38>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	b152      	cbz	r2, 8000968 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <_sbrk+0x38>)
 8000954:	6810      	ldr	r0, [r2, #0]
 8000956:	4403      	add	r3, r0
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <_sbrk+0x3c>)
 800095a:	490b      	ldr	r1, [pc, #44]	; (8000988 <_sbrk+0x40>)
 800095c:	1a52      	subs	r2, r2, r1
 800095e:	4293      	cmp	r3, r2
 8000960:	d806      	bhi.n	8000970 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <_sbrk+0x38>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000966:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_sbrk+0x38>)
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <_sbrk+0x44>)
 800096c:	6011      	str	r1, [r2, #0]
 800096e:	e7f0      	b.n	8000952 <_sbrk+0xa>
    errno = ENOMEM;
 8000970:	f000 ff4c 	bl	800180c <__errno>
 8000974:	230c      	movs	r3, #12
 8000976:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	e7f3      	b.n	8000966 <_sbrk+0x1e>
 800097e:	bf00      	nop
 8000980:	2000011c 	.word	0x2000011c
 8000984:	20018000 	.word	0x20018000
 8000988:	00000400 	.word	0x00000400
 800098c:	20000178 	.word	0x20000178

08000990 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <SystemInit+0x10>)
 8000992:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000996:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__io_putchar>:
#include "main.h"

UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 80009a4:	b500      	push	{lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2,(const uint8_t *)&ch,1,HAL_MAX_DELAY);
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295
 80009ae:	2201      	movs	r2, #1
 80009b0:	a901      	add	r1, sp, #4
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <__io_putchar+0x1c>)
 80009b4:	f000 feb7 	bl	8001726 <HAL_UART_Transmit>
	return ch;
}
 80009b8:	9801      	ldr	r0, [sp, #4]
 80009ba:	b003      	add	sp, #12
 80009bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80009c0:	20000120 	.word	0x20000120

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b500      	push	{lr}
 80009c6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c8:	2230      	movs	r2, #48	; 0x30
 80009ca:	2100      	movs	r1, #0
 80009cc:	a808      	add	r0, sp, #32
 80009ce:	f000 ff47 	bl	8001860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	2300      	movs	r3, #0
 80009d4:	9303      	str	r3, [sp, #12]
 80009d6:	9304      	str	r3, [sp, #16]
 80009d8:	9305      	str	r3, [sp, #20]
 80009da:	9306      	str	r3, [sp, #24]
 80009dc:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <SystemClock_Config+0x9c>)
 80009e2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80009e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009e8:	6411      	str	r1, [r2, #64]	; 0x40
 80009ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009ec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	491b      	ldr	r1, [pc, #108]	; (8000a64 <SystemClock_Config+0xa0>)
 80009f8:	680a      	ldr	r2, [r1, #0]
 80009fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80009fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a02:	600a      	str	r2, [r1, #0]
 8000a04:	680a      	ldr	r2, [r1, #0]
 8000a06:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000a0a:	9202      	str	r2, [sp, #8]
 8000a0c:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0e:	2102      	movs	r1, #2
 8000a10:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	2201      	movs	r2, #1
 8000a14:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a16:	2210      	movs	r2, #16
 8000a18:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a1e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a20:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a24:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a26:	2304      	movs	r3, #4
 8000a28:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2e:	a808      	add	r0, sp, #32
 8000a30:	f000 fa4c 	bl	8000ecc <HAL_RCC_OscConfig>
 8000a34:	b980      	cbnz	r0, 8000a58 <SystemClock_Config+0x94>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	230f      	movs	r3, #15
 8000a38:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a46:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4a:	a803      	add	r0, sp, #12
 8000a4c:	f000 fca4 	bl	8001398 <HAL_RCC_ClockConfig>
 8000a50:	b920      	cbnz	r0, 8000a5c <SystemClock_Config+0x98>
  {
    Error_Handler();
  }
}
 8000a52:	b015      	add	sp, #84	; 0x54
 8000a54:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <SystemClock_Config+0x96>
 8000a5c:	b672      	cpsid	i
 8000a5e:	e7fe      	b.n	8000a5e <SystemClock_Config+0x9a>
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_USART2_UART_Init>:
{
 8000a68:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <MX_USART2_UART_Init+0x2c>)
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_USART2_UART_Init+0x30>)
 8000a6e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000a70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a74:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	2300      	movs	r3, #0
 8000a78:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a7a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7e:	220c      	movs	r2, #12
 8000a80:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	f000 fe1f 	bl	80016c8 <HAL_UART_Init>
 8000a8a:	b900      	cbnz	r0, 8000a8e <MX_USART2_UART_Init+0x26>
}
 8000a8c:	bd08      	pop	{r3, pc}
 8000a8e:	b672      	cpsid	i
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MX_USART2_UART_Init+0x28>
 8000a92:	bf00      	nop
 8000a94:	20000120 	.word	0x20000120
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
{
 8000a9c:	b530      	push	{r4, r5, lr}
 8000a9e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	9405      	str	r4, [sp, #20]
 8000aa4:	9406      	str	r4, [sp, #24]
 8000aa6:	9407      	str	r4, [sp, #28]
 8000aa8:	9408      	str	r4, [sp, #32]
 8000aaa:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	9401      	str	r4, [sp, #4]
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_GPIO_Init+0x9c>)
 8000ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ab2:	f042 0204 	orr.w	r2, r2, #4
 8000ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aba:	f002 0204 	and.w	r2, r2, #4
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	9402      	str	r4, [sp, #8]
 8000ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
 8000acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ace:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ad2:	9202      	str	r2, [sp, #8]
 8000ad4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	9403      	str	r4, [sp, #12]
 8000ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
 8000ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ae2:	f002 0201 	and.w	r2, r2, #1
 8000ae6:	9203      	str	r2, [sp, #12]
 8000ae8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	9404      	str	r4, [sp, #16]
 8000aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aee:	f042 0202 	orr.w	r2, r2, #2
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	9304      	str	r3, [sp, #16]
 8000afc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afe:	4d0f      	ldr	r5, [pc, #60]	; (8000b3c <MX_GPIO_Init+0xa0>)
 8000b00:	4622      	mov	r2, r4
 8000b02:	2120      	movs	r1, #32
 8000b04:	4628      	mov	r0, r5
 8000b06:	f000 f9db 	bl	8000ec0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b14:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	a905      	add	r1, sp, #20
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_GPIO_Init+0xa4>)
 8000b1c:	f000 f8ea 	bl	8000cf4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b20:	2320      	movs	r3, #32
 8000b22:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	a905      	add	r1, sp, #20
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f8e0 	bl	8000cf4 <HAL_GPIO_Init>
}
 8000b34:	b00b      	add	sp, #44	; 0x2c
 8000b36:	bd30      	pop	{r4, r5, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020800 	.word	0x40020800

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4a:	490e      	ldr	r1, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b60:	4c0b      	ldr	r4, [pc, #44]	; (8000b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6e:	f7ff ff0f 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f000 fe51 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fe23 	bl	80007c0 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b88:	08002874 	.word	0x08002874
  ldr r2, =_sbss
 8000b8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b90:	20000178 	.word	0x20000178

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b510      	push	{r4, lr}
 8000b9a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_InitTick+0x40>)
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_InitTick+0x44>)
 8000baa:	6810      	ldr	r0, [r2, #0]
 8000bac:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb0:	f000 f88c 	bl	8000ccc <HAL_SYSTICK_Config>
 8000bb4:	b968      	cbnz	r0, 8000bd2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	2c0f      	cmp	r4, #15
 8000bb8:	d901      	bls.n	8000bbe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	e00a      	b.n	8000bd4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc6:	f000 f84b 	bl	8000c60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_InitTick+0x48>)
 8000bcc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2000      	movs	r0, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bd2:	2001      	movs	r0, #1
}
 8000bd4:	bd10      	pop	{r4, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_Init>:
{
 8000be4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_Init+0x30>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bf6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bfe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f81b 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff ffc6 	bl	8000b98 <HAL_InitTick>
  HAL_MspInit();
 8000c0c:	f7ff fdf6 	bl	80007fc <HAL_MspInit>
}
 8000c10:	2000      	movs	r0, #0
 8000c12:	bd08      	pop	{r3, pc}
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c18:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <HAL_IncTick+0x10>)
 8000c1a:	6811      	ldr	r1, [r2, #0]
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_IncTick+0x14>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	440b      	add	r3, r1
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000164 	.word	0x20000164
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c30:	4b01      	ldr	r3, [pc, #4]	; (8000c38 <HAL_GetTick+0x8>)
 8000c32:	6818      	ldr	r0, [r3, #0]
}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000164 	.word	0x20000164

08000c3c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c3e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	0203      	lsls	r3, r0, #8
 8000c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c4a:	0412      	lsls	r2, r2, #16
 8000c4c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c58:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c60:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_NVIC_SetPriority+0x64>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6a:	f1c3 0c07 	rsb	ip, r3, #7
 8000c6e:	f1bc 0f04 	cmp.w	ip, #4
 8000c72:	bf28      	it	cs
 8000c74:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c78:	f103 0e04 	add.w	lr, r3, #4
 8000c7c:	f1be 0f06 	cmp.w	lr, #6
 8000c80:	bf8c      	ite	hi
 8000c82:	3b03      	subhi	r3, #3
 8000c84:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c86:	f04f 3eff 	mov.w	lr, #4294967295
 8000c8a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c8e:	ea21 010c 	bic.w	r1, r1, ip
 8000c92:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	fa0e f303 	lsl.w	r3, lr, r3
 8000c98:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	db09      	blt.n	8000cb6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	0109      	lsls	r1, r1, #4
 8000ca4:	b2c9      	uxtb	r1, r1
 8000ca6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000caa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000cae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cb2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	f000 000f 	and.w	r0, r0, #15
 8000cba:	0109      	lsls	r1, r1, #4
 8000cbc:	b2c9      	uxtb	r1, r1
 8000cbe:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <HAL_NVIC_SetPriority+0x68>)
 8000cc0:	5419      	strb	r1, [r3, r0]
 8000cc2:	e7f6      	b.n	8000cb2 <HAL_NVIC_SetPriority+0x52>
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	e000ed14 	.word	0xe000ed14

08000ccc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	3801      	subs	r0, #1
 8000cce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd2:	d20b      	bcs.n	8000cec <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000cd8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <HAL_SYSTICK_Config+0x24>)
 8000cdc:	21f0      	movs	r1, #240	; 0xf0
 8000cde:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfc:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfe:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d02:	2503      	movs	r5, #3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d04:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000ebc <HAL_GPIO_Init+0x1c8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d08:	4c6a      	ldr	r4, [pc, #424]	; (8000eb4 <HAL_GPIO_Init+0x1c0>)
 8000d0a:	e04b      	b.n	8000da4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000d0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d0e:	fa05 fa02 	lsl.w	sl, r5, r2
 8000d12:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	68cf      	ldr	r7, [r1, #12]
 8000d18:	4097      	lsls	r7, r2
 8000d1a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000d1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d22:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	684f      	ldr	r7, [r1, #4]
 8000d28:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000d32:	6047      	str	r7, [r0, #4]
 8000d34:	e044      	b.n	8000dc0 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d36:	f04f 0c00 	mov.w	ip, #0
 8000d3a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d3e:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d42:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8000d46:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d4c:	684e      	ldr	r6, [r1, #4]
 8000d4e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d52:	bf0c      	ite	eq
 8000d54:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000d58:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8000d5c:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8000d5e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d60:	684e      	ldr	r6, [r1, #4]
 8000d62:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000d66:	bf0c      	ite	eq
 8000d68:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000d6c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8000d70:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8000d72:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d74:	684e      	ldr	r6, [r1, #4]
 8000d76:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d7a:	bf0c      	ite	eq
 8000d7c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000d80:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8000d84:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d86:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d88:	684e      	ldr	r6, [r1, #4]
 8000d8a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	bf0c      	ite	eq
 8000d90:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000d94:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8000d98:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	3202      	adds	r2, #2
 8000d9e:	2b10      	cmp	r3, #16
 8000da0:	f000 8085 	beq.w	8000eae <HAL_GPIO_Init+0x1ba>
    ioposition = 0x01U << position;
 8000da4:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da8:	680f      	ldr	r7, [r1, #0]
 8000daa:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8000dae:	ea3c 0607 	bics.w	r6, ip, r7
 8000db2:	d1f2      	bne.n	8000d9a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db4:	684f      	ldr	r7, [r1, #4]
 8000db6:	f007 0703 	and.w	r7, r7, #3
 8000dba:	3f01      	subs	r7, #1
 8000dbc:	2f01      	cmp	r7, #1
 8000dbe:	d9a5      	bls.n	8000d0c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc0:	684f      	ldr	r7, [r1, #4]
 8000dc2:	f007 0703 	and.w	r7, r7, #3
 8000dc6:	2f03      	cmp	r7, #3
 8000dc8:	d024      	beq.n	8000e14 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8000dca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dcc:	fa05 fc02 	lsl.w	ip, r5, r2
 8000dd0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	688f      	ldr	r7, [r1, #8]
 8000dd6:	4097      	lsls	r7, r2
 8000dd8:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8000ddc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	684f      	ldr	r7, [r1, #4]
 8000de0:	f007 0703 	and.w	r7, r7, #3
 8000de4:	2f02      	cmp	r7, #2
 8000de6:	d115      	bne.n	8000e14 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000dec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000df0:	f8dc a020 	ldr.w	sl, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df4:	f003 0707 	and.w	r7, r3, #7
 8000df8:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000dfc:	270f      	movs	r7, #15
 8000dfe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e02:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e06:	690f      	ldr	r7, [r1, #16]
 8000e08:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e0c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000e10:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8000e14:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e16:	fa05 fc02 	lsl.w	ip, r5, r2
 8000e1a:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1e:	684f      	ldr	r7, [r1, #4]
 8000e20:	f007 0703 	and.w	r7, r7, #3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8000e2a:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2c:	684f      	ldr	r7, [r1, #4]
 8000e2e:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8000e32:	d0b2      	beq.n	8000d9a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	2700      	movs	r7, #0
 8000e36:	9701      	str	r7, [sp, #4]
 8000e38:	4e1f      	ldr	r6, [pc, #124]	; (8000eb8 <HAL_GPIO_Init+0x1c4>)
 8000e3a:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8000e3c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e40:	6477      	str	r7, [r6, #68]	; 0x44
 8000e42:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8000e44:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000e48:	9701      	str	r7, [sp, #4]
 8000e4a:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4c:	f023 0703 	bic.w	r7, r3, #3
 8000e50:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e54:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000e58:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	f003 0c03 	and.w	ip, r3, #3
 8000e60:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8000e64:	f04f 0c0f 	mov.w	ip, #15
 8000e68:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e6c:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e70:	4540      	cmp	r0, r8
 8000e72:	f43f af60 	beq.w	8000d36 <HAL_GPIO_Init+0x42>
 8000e76:	f5a6 5650 	sub.w	r6, r6, #13312	; 0x3400
 8000e7a:	42b0      	cmp	r0, r6
 8000e7c:	d010      	beq.n	8000ea0 <HAL_GPIO_Init+0x1ac>
 8000e7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e82:	42b0      	cmp	r0, r6
 8000e84:	d00e      	beq.n	8000ea4 <HAL_GPIO_Init+0x1b0>
 8000e86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e8a:	42b0      	cmp	r0, r6
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1b6>
 8000e8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e92:	42b0      	cmp	r0, r6
 8000e94:	bf0c      	ite	eq
 8000e96:	f04f 0c04 	moveq.w	ip, #4
 8000e9a:	f04f 0c07 	movne.w	ip, #7
 8000e9e:	e74c      	b.n	8000d3a <HAL_GPIO_Init+0x46>
 8000ea0:	46f4      	mov	ip, lr
 8000ea2:	e74a      	b.n	8000d3a <HAL_GPIO_Init+0x46>
 8000ea4:	f04f 0c02 	mov.w	ip, #2
 8000ea8:	e747      	b.n	8000d3a <HAL_GPIO_Init+0x46>
 8000eaa:	46ac      	mov	ip, r5
 8000eac:	e745      	b.n	8000d3a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8000eae:	b003      	add	sp, #12
 8000eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eb4:	40013c00 	.word	0x40013c00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	b10a      	cbz	r2, 8000ec6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec2:	6181      	str	r1, [r0, #24]
 8000ec4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec6:	0409      	lsls	r1, r1, #16
 8000ec8:	6181      	str	r1, [r0, #24]
  }
}
 8000eca:	4770      	bx	lr

08000ecc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	f000 81e1 	beq.w	8001294 <HAL_RCC_OscConfig+0x3c8>
{
 8000ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	6803      	ldr	r3, [r0, #0]
 8000edc:	f013 0f01 	tst.w	r3, #1
 8000ee0:	d03b      	beq.n	8000f5a <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee2:	4b9f      	ldr	r3, [pc, #636]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d02c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	4b9c      	ldr	r3, [pc, #624]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d021      	beq.n	8000f3e <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d04f      	beq.n	8000fa2 <HAL_RCC_OscConfig+0xd6>
 8000f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f06:	d052      	beq.n	8000fae <HAL_RCC_OscConfig+0xe2>
 8000f08:	4b95      	ldr	r3, [pc, #596]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f1a:	6863      	ldr	r3, [r4, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d050      	beq.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fe86 	bl	8000c30 <HAL_GetTick>
 8000f24:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	4e8e      	ldr	r6, [pc, #568]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f28:	6833      	ldr	r3, [r6, #0]
 8000f2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f2e:	d114      	bne.n	8000f5a <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fe7e 	bl	8000c30 <HAL_GetTick>
 8000f34:	1b40      	subs	r0, r0, r5
 8000f36:	2864      	cmp	r0, #100	; 0x64
 8000f38:	d9f6      	bls.n	8000f28 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	e1b1      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f3e:	4b88      	ldr	r3, [pc, #544]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f46:	d0d8      	beq.n	8000efa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	4b85      	ldr	r3, [pc, #532]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f50:	d003      	beq.n	8000f5a <HAL_RCC_OscConfig+0x8e>
 8000f52:	6863      	ldr	r3, [r4, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 819f 	beq.w	8001298 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f013 0f02 	tst.w	r3, #2
 8000f60:	d054      	beq.n	800100c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f62:	4b7f      	ldr	r3, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f013 0f0c 	tst.w	r3, #12
 8000f6a:	d03e      	beq.n	8000fea <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6c:	4b7c      	ldr	r3, [pc, #496]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d033      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f78:	68e3      	ldr	r3, [r4, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d068      	beq.n	8001050 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	4b79      	ldr	r3, [pc, #484]	; (8001164 <HAL_RCC_OscConfig+0x298>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fe54 	bl	8000c30 <HAL_GetTick>
 8000f88:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	4e75      	ldr	r6, [pc, #468]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000f8c:	6833      	ldr	r3, [r6, #0]
 8000f8e:	f013 0f02 	tst.w	r3, #2
 8000f92:	d154      	bne.n	800103e <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f94:	f7ff fe4c 	bl	8000c30 <HAL_GetTick>
 8000f98:	1b40      	subs	r0, r0, r5
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d9f6      	bls.n	8000f8c <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	e17f      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa2:	4a6f      	ldr	r2, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000fa4:	6813      	ldr	r3, [r2, #0]
 8000fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e7b5      	b.n	8000f1a <HAL_RCC_OscConfig+0x4e>
 8000fae:	4b6c      	ldr	r3, [pc, #432]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e7ab      	b.n	8000f1a <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fe35 	bl	8000c30 <HAL_GetTick>
 8000fc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc8:	4e65      	ldr	r6, [pc, #404]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000fca:	6833      	ldr	r3, [r6, #0]
 8000fcc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fd0:	d0c3      	beq.n	8000f5a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fe2d 	bl	8000c30 <HAL_GetTick>
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	2864      	cmp	r0, #100	; 0x64
 8000fda:	d9f6      	bls.n	8000fca <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8000fdc:	2003      	movs	r0, #3
 8000fde:	e160      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe0:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fe8:	d1c6      	bne.n	8000f78 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f013 0f02 	tst.w	r3, #2
 8000ff2:	d003      	beq.n	8000ffc <HAL_RCC_OscConfig+0x130>
 8000ff4:	68e3      	ldr	r3, [r4, #12]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	f040 8150 	bne.w	800129c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	6921      	ldr	r1, [r4, #16]
 8001002:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001006:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800100a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	f013 0f08 	tst.w	r3, #8
 8001012:	d042      	beq.n	800109a <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001014:	6963      	ldr	r3, [r4, #20]
 8001016:	b36b      	cbz	r3, 8001074 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001018:	4b52      	ldr	r3, [pc, #328]	; (8001164 <HAL_RCC_OscConfig+0x298>)
 800101a:	2201      	movs	r2, #1
 800101c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001020:	f7ff fe06 	bl	8000c30 <HAL_GetTick>
 8001024:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001026:	4e4e      	ldr	r6, [pc, #312]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8001028:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800102a:	f013 0f02 	tst.w	r3, #2
 800102e:	d134      	bne.n	800109a <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fdfe 	bl	8000c30 <HAL_GetTick>
 8001034:	1b40      	subs	r0, r0, r5
 8001036:	2802      	cmp	r0, #2
 8001038:	d9f6      	bls.n	8001028 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 800103a:	2003      	movs	r0, #3
 800103c:	e131      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8001040:	6813      	ldr	r3, [r2, #0]
 8001042:	6921      	ldr	r1, [r4, #16]
 8001044:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001048:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e7dd      	b.n	800100c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <HAL_RCC_OscConfig+0x298>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001056:	f7ff fdeb 	bl	8000c30 <HAL_GetTick>
 800105a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105c:	4e40      	ldr	r6, [pc, #256]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 800105e:	6833      	ldr	r3, [r6, #0]
 8001060:	f013 0f02 	tst.w	r3, #2
 8001064:	d0d2      	beq.n	800100c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fde3 	bl	8000c30 <HAL_GetTick>
 800106a:	1b40      	subs	r0, r0, r5
 800106c:	2802      	cmp	r0, #2
 800106e:	d9f6      	bls.n	800105e <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001070:	2003      	movs	r0, #3
 8001072:	e116      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001074:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_RCC_OscConfig+0x298>)
 8001076:	2200      	movs	r2, #0
 8001078:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107c:	f7ff fdd8 	bl	8000c30 <HAL_GetTick>
 8001080:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001082:	4e37      	ldr	r6, [pc, #220]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8001084:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001086:	f013 0f02 	tst.w	r3, #2
 800108a:	d006      	beq.n	800109a <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fdd0 	bl	8000c30 <HAL_GetTick>
 8001090:	1b40      	subs	r0, r0, r5
 8001092:	2802      	cmp	r0, #2
 8001094:	d9f6      	bls.n	8001084 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8001096:	2003      	movs	r0, #3
 8001098:	e103      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f013 0f04 	tst.w	r3, #4
 80010a0:	d076      	beq.n	8001190 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010aa:	d133      	bne.n	8001114 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 80010b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010c4:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_RCC_OscConfig+0x29c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010ce:	d023      	beq.n	8001118 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d0:	68a3      	ldr	r3, [r4, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d034      	beq.n	8001140 <HAL_RCC_OscConfig+0x274>
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d038      	beq.n	800114c <HAL_RCC_OscConfig+0x280>
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 80010dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	671a      	str	r2, [r3, #112]	; 0x70
 80010e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010e6:	f022 0204 	bic.w	r2, r2, #4
 80010ea:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ec:	68a3      	ldr	r3, [r4, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03c      	beq.n	800116c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f2:	f7ff fd9d 	bl	8000c30 <HAL_GetTick>
 80010f6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	4f19      	ldr	r7, [pc, #100]	; (8001160 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001100:	f013 0f02 	tst.w	r3, #2
 8001104:	d143      	bne.n	800118e <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fd93 	bl	8000c30 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	4540      	cmp	r0, r8
 800110e:	d9f6      	bls.n	80010fe <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8001110:	2003      	movs	r0, #3
 8001112:	e0c6      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8001114:	2500      	movs	r5, #0
 8001116:	e7d6      	b.n	80010c6 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_RCC_OscConfig+0x29c>)
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001122:	f7ff fd85 	bl	8000c30 <HAL_GetTick>
 8001126:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	4f0f      	ldr	r7, [pc, #60]	; (8001168 <HAL_RCC_OscConfig+0x29c>)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001130:	d1ce      	bne.n	80010d0 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001132:	f7ff fd7d 	bl	8000c30 <HAL_GetTick>
 8001136:	1b80      	subs	r0, r0, r6
 8001138:	2802      	cmp	r0, #2
 800113a:	d9f6      	bls.n	800112a <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 800113c:	2003      	movs	r0, #3
 800113e:	e0b0      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 8001142:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6713      	str	r3, [r2, #112]	; 0x70
 800114a:	e7cf      	b.n	80010ec <HAL_RCC_OscConfig+0x220>
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <HAL_RCC_OscConfig+0x294>)
 800114e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001150:	f042 0204 	orr.w	r2, r2, #4
 8001154:	671a      	str	r2, [r3, #112]	; 0x70
 8001156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	671a      	str	r2, [r3, #112]	; 0x70
 800115e:	e7c5      	b.n	80010ec <HAL_RCC_OscConfig+0x220>
 8001160:	40023800 	.word	0x40023800
 8001164:	42470000 	.word	0x42470000
 8001168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fd60 	bl	8000c30 <HAL_GetTick>
 8001170:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001172:	4f52      	ldr	r7, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001174:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800117a:	f013 0f02 	tst.w	r3, #2
 800117e:	d006      	beq.n	800118e <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff fd56 	bl	8000c30 <HAL_GetTick>
 8001184:	1b80      	subs	r0, r0, r6
 8001186:	4540      	cmp	r0, r8
 8001188:	d9f6      	bls.n	8001178 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800118a:	2003      	movs	r0, #3
 800118c:	e089      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800118e:	b9ed      	cbnz	r5, 80011cc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001190:	69a3      	ldr	r3, [r4, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8084 	beq.w	80012a0 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001198:	4a48      	ldr	r2, [pc, #288]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 800119a:	6892      	ldr	r2, [r2, #8]
 800119c:	f002 020c 	and.w	r2, r2, #12
 80011a0:	2a08      	cmp	r2, #8
 80011a2:	d051      	beq.n	8001248 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d017      	beq.n	80011d8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_RCC_OscConfig+0x3f4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fd3f 	bl	8000c30 <HAL_GetTick>
 80011b2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b4:	4d41      	ldr	r5, [pc, #260]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011bc:	d042      	beq.n	8001244 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fd37 	bl	8000c30 <HAL_GetTick>
 80011c2:	1b00      	subs	r0, r0, r4
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d9f6      	bls.n	80011b6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80011c8:	2003      	movs	r0, #3
 80011ca:	e06a      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011cc:	4a3b      	ldr	r2, [pc, #236]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 80011ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	e7db      	b.n	8001190 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <HAL_RCC_OscConfig+0x3f4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011de:	f7ff fd27 	bl	8000c30 <HAL_GetTick>
 80011e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e4:	4e35      	ldr	r6, [pc, #212]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 80011e6:	6833      	ldr	r3, [r6, #0]
 80011e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011ec:	d006      	beq.n	80011fc <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ee:	f7ff fd1f 	bl	8000c30 <HAL_GetTick>
 80011f2:	1b40      	subs	r0, r0, r5
 80011f4:	2802      	cmp	r0, #2
 80011f6:	d9f6      	bls.n	80011e6 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80011f8:	2003      	movs	r0, #3
 80011fa:	e052      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011fc:	69e3      	ldr	r3, [r4, #28]
 80011fe:	6a22      	ldr	r2, [r4, #32]
 8001200:	4313      	orrs	r3, r2
 8001202:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001204:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800120a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800120e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001210:	0852      	lsrs	r2, r2, #1
 8001212:	3a01      	subs	r2, #1
 8001214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 800121a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_RCC_OscConfig+0x3f4>)
 800121e:	2201      	movs	r2, #1
 8001220:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001222:	f7ff fd05 	bl	8000c30 <HAL_GetTick>
 8001226:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001228:	4d24      	ldr	r5, [pc, #144]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fcfd 	bl	8000c30 <HAL_GetTick>
 8001236:	1b00      	subs	r0, r0, r4
 8001238:	2802      	cmp	r0, #2
 800123a:	d9f6      	bls.n	800122a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800123c:	2003      	movs	r0, #3
 800123e:	e030      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001240:	2000      	movs	r0, #0
 8001242:	e02e      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
 8001244:	2000      	movs	r0, #0
 8001246:	e02c      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001248:	2b01      	cmp	r3, #1
 800124a:	d02d      	beq.n	80012a8 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_RCC_OscConfig+0x3f0>)
 800124e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001250:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001254:	69e2      	ldr	r2, [r4, #28]
 8001256:	4291      	cmp	r1, r2
 8001258:	d128      	bne.n	80012ac <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800125a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125e:	6a21      	ldr	r1, [r4, #32]
 8001260:	428a      	cmp	r2, r1
 8001262:	d125      	bne.n	80012b0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001264:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001266:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800126a:	401a      	ands	r2, r3
 800126c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001270:	d120      	bne.n	80012b4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001272:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001276:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001278:	0852      	lsrs	r2, r2, #1
 800127a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800127c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001280:	d11a      	bne.n	80012b8 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001284:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001288:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 800128c:	bf14      	ite	ne
 800128e:	2001      	movne	r0, #1
 8001290:	2000      	moveq	r0, #0
 8001292:	e006      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8001294:	2001      	movs	r0, #1
}
 8001296:	4770      	bx	lr
        return HAL_ERROR;
 8001298:	2001      	movs	r0, #1
 800129a:	e002      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 80012a0:	2000      	movs	r0, #0
}
 80012a2:	b002      	add	sp, #8
 80012a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80012a8:	2001      	movs	r0, #1
 80012aa:	e7fa      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
 80012ae:	e7f8      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
 80012b0:	2001      	movs	r0, #1
 80012b2:	e7f6      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
 80012b4:	2001      	movs	r0, #1
 80012b6:	e7f4      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
 80012b8:	2001      	movs	r0, #1
 80012ba:	e7f2      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d6>
 80012bc:	40023800 	.word	0x40023800
 80012c0:	42470000 	.word	0x42470000

080012c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <HAL_RCC_GetSysClockFreq+0xc8>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d057      	beq.n	8001382 <HAL_RCC_GetSysClockFreq+0xbe>
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d157      	bne.n	8001386 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_GetSysClockFreq+0xc8>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012e4:	d02a      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_RCC_GetSysClockFreq+0xc8>)
 80012e8:	6859      	ldr	r1, [r3, #4]
 80012ea:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80012ee:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80012f2:	ebb1 000c 	subs.w	r0, r1, ip
 80012f6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80012fa:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80012fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001302:	0181      	lsls	r1, r0, #6
 8001304:	1a09      	subs	r1, r1, r0
 8001306:	eb63 030e 	sbc.w	r3, r3, lr
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001310:	00c9      	lsls	r1, r1, #3
 8001312:	eb11 0c0c 	adds.w	ip, r1, ip
 8001316:	f143 0300 	adc.w	r3, r3, #0
 800131a:	0259      	lsls	r1, r3, #9
 800131c:	2300      	movs	r3, #0
 800131e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001322:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001326:	f7fe ffd3 	bl	80002d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_RCC_GetSysClockFreq+0xc8>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001332:	3301      	adds	r3, #1
 8001334:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001336:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800133a:	e025      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_RCC_GetSysClockFreq+0xc8>)
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001344:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001348:	ebb1 000c 	subs.w	r0, r1, ip
 800134c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001350:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001354:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001358:	0181      	lsls	r1, r0, #6
 800135a:	1a09      	subs	r1, r1, r0
 800135c:	eb63 030e 	sbc.w	r3, r3, lr
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001366:	00c9      	lsls	r1, r1, #3
 8001368:	eb11 0c0c 	adds.w	ip, r1, ip
 800136c:	f143 0300 	adc.w	r3, r3, #0
 8001370:	0299      	lsls	r1, r3, #10
 8001372:	2300      	movs	r3, #0
 8001374:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001378:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800137c:	f7fe ffa8 	bl	80002d0 <__aeabi_uldivmod>
 8001380:	e7d3      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001384:	e000      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001388:	bd08      	pop	{r3, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	007a1200 	.word	0x007a1200
 8001394:	00f42400 	.word	0x00f42400

08001398 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 809d 	beq.w	80014d8 <HAL_RCC_ClockConfig+0x140>
{
 800139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a2:	460d      	mov	r5, r1
 80013a4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a6:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	428b      	cmp	r3, r1
 80013b0:	d208      	bcs.n	80013c4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	b2cb      	uxtb	r3, r1
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80013b6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	428b      	cmp	r3, r1
 80013c0:	f040 808c 	bne.w	80014dc <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	f013 0f02 	tst.w	r3, #2
 80013ca:	d017      	beq.n	80013fc <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	f013 0f04 	tst.w	r3, #4
 80013d0:	d004      	beq.n	80013dc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d2:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 80013d4:	6893      	ldr	r3, [r2, #8]
 80013d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013da:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	f013 0f08 	tst.w	r3, #8
 80013e2:	d004      	beq.n	80013ee <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e4:	4a41      	ldr	r2, [pc, #260]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 80013e6:	6893      	ldr	r3, [r2, #8]
 80013e8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ee:	4a3f      	ldr	r2, [pc, #252]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 80013f0:	6893      	ldr	r3, [r2, #8]
 80013f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013f6:	68a1      	ldr	r1, [r4, #8]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	f013 0f01 	tst.w	r3, #1
 8001402:	d032      	beq.n	800146a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001404:	6862      	ldr	r2, [r4, #4]
 8001406:	2a01      	cmp	r2, #1
 8001408:	d021      	beq.n	800144e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140a:	1e93      	subs	r3, r2, #2
 800140c:	2b01      	cmp	r3, #1
 800140e:	d925      	bls.n	800145c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f013 0f02 	tst.w	r3, #2
 8001418:	d062      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141a:	4934      	ldr	r1, [pc, #208]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 800141c:	688b      	ldr	r3, [r1, #8]
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001426:	f7ff fc03 	bl	8000c30 <HAL_GetTick>
 800142a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142c:	4f2f      	ldr	r7, [pc, #188]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	6862      	ldr	r2, [r4, #4]
 800143a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800143e:	d014      	beq.n	800146a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001440:	f7ff fbf6 	bl	8000c30 <HAL_GetTick>
 8001444:	1b80      	subs	r0, r0, r6
 8001446:	4540      	cmp	r0, r8
 8001448:	d9f3      	bls.n	8001432 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800144a:	2003      	movs	r0, #3
 800144c:	e042      	b.n	80014d4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001456:	d1e0      	bne.n	800141a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001458:	2001      	movs	r0, #1
 800145a:	e03b      	b.n	80014d4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001464:	d1d9      	bne.n	800141a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	e034      	b.n	80014d4 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	42ab      	cmp	r3, r5
 8001474:	d907      	bls.n	8001486 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	b2ea      	uxtb	r2, r5
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800147a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	42ab      	cmp	r3, r5
 8001484:	d12e      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	f013 0f04 	tst.w	r3, #4
 800148c:	d006      	beq.n	800149c <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001496:	68e1      	ldr	r1, [r4, #12]
 8001498:	430b      	orrs	r3, r1
 800149a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	f013 0f08 	tst.w	r3, #8
 80014a2:	d007      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a4:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 80014a6:	6893      	ldr	r3, [r2, #8]
 80014a8:	6921      	ldr	r1, [r4, #16]
 80014aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b4:	f7ff ff06 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_RCC_ClockConfig+0x154>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_RCC_ClockConfig+0x158>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	40d8      	lsrs	r0, r3
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_ClockConfig+0x15c>)
 80014c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_ClockConfig+0x160>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	f7ff fb63 	bl	8000b98 <HAL_InitTick>
  return HAL_OK;
 80014d2:	2000      	movs	r0, #0
}
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
}
 80014da:	4770      	bx	lr
      return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	e7f9      	b.n	80014d4 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
 80014e2:	e7f7      	b.n	80014d4 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
 80014e6:	e7f5      	b.n	80014d4 <HAL_RCC_ClockConfig+0x13c>
 80014e8:	40023c00 	.word	0x40023c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	080027b4 	.word	0x080027b4
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x14>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800150a:	6810      	ldr	r0, [r2, #0]
}
 800150c:	40d8      	lsrs	r0, r3
 800150e:	4770      	bx	lr
 8001510:	40023800 	.word	0x40023800
 8001514:	080027c4 	.word	0x080027c4
 8001518:	20000000 	.word	0x20000000

0800151c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_RCC_GetPCLK2Freq+0x14>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800152a:	6810      	ldr	r0, [r2, #0]
}
 800152c:	40d8      	lsrs	r0, r3
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800
 8001534:	080027c4 	.word	0x080027c4
 8001538:	20000000 	.word	0x20000000

0800153c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001540:	6802      	ldr	r2, [r0, #0]
 8001542:	6913      	ldr	r3, [r2, #16]
 8001544:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001548:	68c1      	ldr	r1, [r0, #12]
 800154a:	430b      	orrs	r3, r1
 800154c:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800154e:	6801      	ldr	r1, [r0, #0]
 8001550:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001552:	6883      	ldr	r3, [r0, #8]
 8001554:	6900      	ldr	r0, [r0, #16]
 8001556:	4303      	orrs	r3, r0
 8001558:	6960      	ldr	r0, [r4, #20]
 800155a:	4303      	orrs	r3, r0
 800155c:	69e0      	ldr	r0, [r4, #28]
 800155e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001560:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001564:	f022 020c 	bic.w	r2, r2, #12
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	6953      	ldr	r3, [r2, #20]
 8001570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001574:	69a1      	ldr	r1, [r4, #24]
 8001576:	430b      	orrs	r3, r1
 8001578:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <UART_SetConfig+0xfc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d006      	beq.n	8001590 <UART_SetConfig+0x54>
 8001582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001586:	4293      	cmp	r3, r2
 8001588:	d002      	beq.n	8001590 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800158a:	f7ff ffb7 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 800158e:	e001      	b.n	8001594 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001590:	f7ff ffc4 	bl	800151c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001594:	69e3      	ldr	r3, [r4, #28]
 8001596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800159a:	d024      	beq.n	80015e6 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800159c:	2100      	movs	r1, #0
 800159e:	1803      	adds	r3, r0, r0
 80015a0:	4149      	adcs	r1, r1
 80015a2:	181b      	adds	r3, r3, r0
 80015a4:	f141 0100 	adc.w	r1, r1, #0
 80015a8:	00c9      	lsls	r1, r1, #3
 80015aa:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	1818      	adds	r0, r3, r0
 80015b2:	6863      	ldr	r3, [r4, #4]
 80015b4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80015b8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80015bc:	f141 0100 	adc.w	r1, r1, #0
 80015c0:	f7fe fe86 	bl	80002d0 <__aeabi_uldivmod>
 80015c4:	6821      	ldr	r1, [r4, #0]
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <UART_SetConfig+0x100>)
 80015c8:	fba2 4300 	umull	r4, r3, r2, r0
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	2464      	movs	r4, #100	; 0x64
 80015d0:	fb04 0013 	mls	r0, r4, r3, r0
 80015d4:	0100      	lsls	r0, r0, #4
 80015d6:	3032      	adds	r0, #50	; 0x32
 80015d8:	fba2 2000 	umull	r2, r0, r2, r0
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80015e2:	6088      	str	r0, [r1, #8]
  }
}
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015e6:	2300      	movs	r3, #0
 80015e8:	1802      	adds	r2, r0, r0
 80015ea:	eb43 0103 	adc.w	r1, r3, r3
 80015ee:	1812      	adds	r2, r2, r0
 80015f0:	f141 0100 	adc.w	r1, r1, #0
 80015f4:	00c9      	lsls	r1, r1, #3
 80015f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015fa:	00d2      	lsls	r2, r2, #3
 80015fc:	1810      	adds	r0, r2, r0
 80015fe:	f141 0100 	adc.w	r1, r1, #0
 8001602:	6862      	ldr	r2, [r4, #4]
 8001604:	1892      	adds	r2, r2, r2
 8001606:	415b      	adcs	r3, r3
 8001608:	f7fe fe62 	bl	80002d0 <__aeabi_uldivmod>
 800160c:	4d0b      	ldr	r5, [pc, #44]	; (800163c <UART_SetConfig+0x100>)
 800160e:	fba5 3200 	umull	r3, r2, r5, r0
 8001612:	0951      	lsrs	r1, r2, #5
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	fb03 0311 	mls	r3, r3, r1, r0
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	3332      	adds	r3, #50	; 0x32
 800161e:	fba5 2303 	umull	r2, r3, r5, r3
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8001628:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001632:	4413      	add	r3, r2
 8001634:	6083      	str	r3, [r0, #8]
 8001636:	e7d5      	b.n	80015e4 <UART_SetConfig+0xa8>
 8001638:	40011000 	.word	0x40011000
 800163c:	51eb851f 	.word	0x51eb851f

08001640 <UART_WaitOnFlagUntilTimeout>:
{
 8001640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001644:	4680      	mov	r8, r0
 8001646:	460e      	mov	r6, r1
 8001648:	4615      	mov	r5, r2
 800164a:	4699      	mov	r9, r3
 800164c:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800164e:	f8d8 2000 	ldr.w	r2, [r8]
 8001652:	6814      	ldr	r4, [r2, #0]
 8001654:	ea36 0304 	bics.w	r3, r6, r4
 8001658:	bf0c      	ite	eq
 800165a:	f04f 0c01 	moveq.w	ip, #1
 800165e:	f04f 0c00 	movne.w	ip, #0
 8001662:	45ac      	cmp	ip, r5
 8001664:	d12d      	bne.n	80016c2 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8001666:	f1b7 3fff 	cmp.w	r7, #4294967295
 800166a:	d0f2      	beq.n	8001652 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800166c:	b12f      	cbz	r7, 800167a <UART_WaitOnFlagUntilTimeout+0x3a>
 800166e:	f7ff fadf 	bl	8000c30 <HAL_GetTick>
 8001672:	eba0 0009 	sub.w	r0, r0, r9
 8001676:	42b8      	cmp	r0, r7
 8001678:	d9e9      	bls.n	800164e <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800167a:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800167e:	f102 030c 	add.w	r3, r2, #12
 8001682:	e853 3f00 	ldrex	r3, [r3]
 8001686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800168a:	320c      	adds	r2, #12
 800168c:	e842 3100 	strex	r1, r3, [r2]
 8001690:	2900      	cmp	r1, #0
 8001692:	d1f2      	bne.n	800167a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001694:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001698:	f102 0314 	add.w	r3, r2, #20
 800169c:	e853 3f00 	ldrex	r3, [r3]
 80016a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016a4:	3214      	adds	r2, #20
 80016a6:	e842 3100 	strex	r1, r3, [r2]
 80016aa:	2900      	cmp	r1, #0
 80016ac:	d1f2      	bne.n	8001694 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 80016ae:	2320      	movs	r3, #32
 80016b0:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80016b4:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80016b8:	2300      	movs	r3, #0
 80016ba:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
 80016c0:	e000      	b.n	80016c4 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 80016c2:	2000      	movs	r0, #0
}
 80016c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080016c8 <HAL_UART_Init>:
  if (huart == NULL)
 80016c8:	b358      	cbz	r0, 8001722 <HAL_UART_Init+0x5a>
{
 80016ca:	b510      	push	{r4, lr}
 80016cc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80016ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016d2:	b30b      	cbz	r3, 8001718 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80016d4:	2324      	movs	r3, #36	; 0x24
 80016d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	68d3      	ldr	r3, [r2, #12]
 80016de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ff29 	bl	800153c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	6913      	ldr	r3, [r2, #16]
 80016ee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80016f2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016f4:	6822      	ldr	r2, [r4, #0]
 80016f6:	6953      	ldr	r3, [r2, #20]
 80016f8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80016fc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	68d3      	ldr	r3, [r2, #12]
 8001702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001706:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001708:	2000      	movs	r0, #0
 800170a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800170c:	2320      	movs	r3, #32
 800170e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001712:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001716:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001718:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800171c:	f7ff f88e 	bl	800083c <HAL_UART_MspInit>
 8001720:	e7d8      	b.n	80016d4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
}
 8001724:	4770      	bx	lr

08001726 <HAL_UART_Transmit>:
{
 8001726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800172e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b20      	cmp	r3, #32
 8001736:	d15a      	bne.n	80017ee <HAL_UART_Transmit+0xc8>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800173e:	2900      	cmp	r1, #0
 8001740:	d059      	beq.n	80017f6 <HAL_UART_Transmit+0xd0>
 8001742:	2a00      	cmp	r2, #0
 8001744:	d059      	beq.n	80017fa <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8001746:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800174a:	2b01      	cmp	r3, #1
 800174c:	d057      	beq.n	80017fe <HAL_UART_Transmit+0xd8>
 800174e:	2301      	movs	r3, #1
 8001750:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001758:	2321      	movs	r3, #33	; 0x21
 800175a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800175e:	f7ff fa67 	bl	8000c30 <HAL_GetTick>
 8001762:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001764:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001768:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800176c:	68a3      	ldr	r3, [r4, #8]
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001772:	d00c      	beq.n	800178e <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8001774:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8001778:	2300      	movs	r3, #0
 800177a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800177e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001780:	b29b      	uxth	r3, r3
 8001782:	b343      	cbz	r3, 80017d6 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001784:	f04f 0900 	mov.w	r9, #0
 8001788:	f04f 0880 	mov.w	r8, #128	; 0x80
 800178c:	e014      	b.n	80017b8 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800178e:	6923      	ldr	r3, [r4, #16]
 8001790:	b913      	cbnz	r3, 8001798 <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8001792:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8001794:	2500      	movs	r5, #0
 8001796:	e7ef      	b.n	8001778 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8001798:	f04f 0a00 	mov.w	sl, #0
 800179c:	e7ec      	b.n	8001778 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80017a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80017aa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80017ac:	3a01      	subs	r2, #1
 80017ae:	b292      	uxth	r2, r2
 80017b0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	b173      	cbz	r3, 80017d6 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017b8:	9600      	str	r6, [sp, #0]
 80017ba:	463b      	mov	r3, r7
 80017bc:	464a      	mov	r2, r9
 80017be:	4641      	mov	r1, r8
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff ff3d 	bl	8001640 <UART_WaitOnFlagUntilTimeout>
 80017c6:	b9e0      	cbnz	r0, 8001802 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	d0e8      	beq.n	800179e <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	f815 2b01 	ldrb.w	r2, [r5], #1
 80017d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017d4:	e7e9      	b.n	80017aa <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017d6:	9600      	str	r6, [sp, #0]
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff ff2e 	bl	8001640 <UART_WaitOnFlagUntilTimeout>
 80017e4:	b978      	cbnz	r0, 8001806 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 80017e6:	2320      	movs	r3, #32
 80017e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80017ec:	e000      	b.n	80017f0 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 80017ee:	2002      	movs	r0, #2
}
 80017f0:	b002      	add	sp, #8
 80017f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	e7fa      	b.n	80017f0 <HAL_UART_Transmit+0xca>
 80017fa:	2001      	movs	r0, #1
 80017fc:	e7f8      	b.n	80017f0 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 80017fe:	2002      	movs	r0, #2
 8001800:	e7f6      	b.n	80017f0 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8001802:	2003      	movs	r0, #3
 8001804:	e7f4      	b.n	80017f0 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8001806:	2003      	movs	r0, #3
 8001808:	e7f2      	b.n	80017f0 <HAL_UART_Transmit+0xca>
	...

0800180c <__errno>:
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <__errno+0x8>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4d0d      	ldr	r5, [pc, #52]	; (8001850 <__libc_init_array+0x38>)
 800181c:	4c0d      	ldr	r4, [pc, #52]	; (8001854 <__libc_init_array+0x3c>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	2600      	movs	r6, #0
 8001824:	42a6      	cmp	r6, r4
 8001826:	d109      	bne.n	800183c <__libc_init_array+0x24>
 8001828:	4d0b      	ldr	r5, [pc, #44]	; (8001858 <__libc_init_array+0x40>)
 800182a:	4c0c      	ldr	r4, [pc, #48]	; (800185c <__libc_init_array+0x44>)
 800182c:	f000 ffae 	bl	800278c <_init>
 8001830:	1b64      	subs	r4, r4, r5
 8001832:	10a4      	asrs	r4, r4, #2
 8001834:	2600      	movs	r6, #0
 8001836:	42a6      	cmp	r6, r4
 8001838:	d105      	bne.n	8001846 <__libc_init_array+0x2e>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001840:	4798      	blx	r3
 8001842:	3601      	adds	r6, #1
 8001844:	e7ee      	b.n	8001824 <__libc_init_array+0xc>
 8001846:	f855 3b04 	ldr.w	r3, [r5], #4
 800184a:	4798      	blx	r3
 800184c:	3601      	adds	r6, #1
 800184e:	e7f2      	b.n	8001836 <__libc_init_array+0x1e>
 8001850:	0800286c 	.word	0x0800286c
 8001854:	0800286c 	.word	0x0800286c
 8001858:	0800286c 	.word	0x0800286c
 800185c:	08002870 	.word	0x08002870

08001860 <memset>:
 8001860:	4402      	add	r2, r0
 8001862:	4603      	mov	r3, r0
 8001864:	4293      	cmp	r3, r2
 8001866:	d100      	bne.n	800186a <memset+0xa>
 8001868:	4770      	bx	lr
 800186a:	f803 1b01 	strb.w	r1, [r3], #1
 800186e:	e7f9      	b.n	8001864 <memset+0x4>

08001870 <iprintf>:
 8001870:	b40f      	push	{r0, r1, r2, r3}
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <iprintf+0x2c>)
 8001874:	b513      	push	{r0, r1, r4, lr}
 8001876:	681c      	ldr	r4, [r3, #0]
 8001878:	b124      	cbz	r4, 8001884 <iprintf+0x14>
 800187a:	69a3      	ldr	r3, [r4, #24]
 800187c:	b913      	cbnz	r3, 8001884 <iprintf+0x14>
 800187e:	4620      	mov	r0, r4
 8001880:	f000 f866 	bl	8001950 <__sinit>
 8001884:	ab05      	add	r3, sp, #20
 8001886:	9a04      	ldr	r2, [sp, #16]
 8001888:	68a1      	ldr	r1, [r4, #8]
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	4620      	mov	r0, r4
 800188e:	f000 f9bd 	bl	8001c0c <_vfiprintf_r>
 8001892:	b002      	add	sp, #8
 8001894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001898:	b004      	add	sp, #16
 800189a:	4770      	bx	lr
 800189c:	2000000c 	.word	0x2000000c

080018a0 <std>:
 80018a0:	2300      	movs	r3, #0
 80018a2:	b510      	push	{r4, lr}
 80018a4:	4604      	mov	r4, r0
 80018a6:	e9c0 3300 	strd	r3, r3, [r0]
 80018aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018ae:	6083      	str	r3, [r0, #8]
 80018b0:	8181      	strh	r1, [r0, #12]
 80018b2:	6643      	str	r3, [r0, #100]	; 0x64
 80018b4:	81c2      	strh	r2, [r0, #14]
 80018b6:	6183      	str	r3, [r0, #24]
 80018b8:	4619      	mov	r1, r3
 80018ba:	2208      	movs	r2, #8
 80018bc:	305c      	adds	r0, #92	; 0x5c
 80018be:	f7ff ffcf 	bl	8001860 <memset>
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <std+0x38>)
 80018c4:	6263      	str	r3, [r4, #36]	; 0x24
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <std+0x3c>)
 80018c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <std+0x40>)
 80018cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <std+0x44>)
 80018d0:	6224      	str	r4, [r4, #32]
 80018d2:	6323      	str	r3, [r4, #48]	; 0x30
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop
 80018d8:	080021b5 	.word	0x080021b5
 80018dc:	080021d7 	.word	0x080021d7
 80018e0:	0800220f 	.word	0x0800220f
 80018e4:	08002233 	.word	0x08002233

080018e8 <_cleanup_r>:
 80018e8:	4901      	ldr	r1, [pc, #4]	; (80018f0 <_cleanup_r+0x8>)
 80018ea:	f000 b8af 	b.w	8001a4c <_fwalk_reent>
 80018ee:	bf00      	nop
 80018f0:	0800250d 	.word	0x0800250d

080018f4 <__sfmoreglue>:
 80018f4:	b570      	push	{r4, r5, r6, lr}
 80018f6:	2268      	movs	r2, #104	; 0x68
 80018f8:	1e4d      	subs	r5, r1, #1
 80018fa:	4355      	muls	r5, r2
 80018fc:	460e      	mov	r6, r1
 80018fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001902:	f000 f8e5 	bl	8001ad0 <_malloc_r>
 8001906:	4604      	mov	r4, r0
 8001908:	b140      	cbz	r0, 800191c <__sfmoreglue+0x28>
 800190a:	2100      	movs	r1, #0
 800190c:	e9c0 1600 	strd	r1, r6, [r0]
 8001910:	300c      	adds	r0, #12
 8001912:	60a0      	str	r0, [r4, #8]
 8001914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001918:	f7ff ffa2 	bl	8001860 <memset>
 800191c:	4620      	mov	r0, r4
 800191e:	bd70      	pop	{r4, r5, r6, pc}

08001920 <__sfp_lock_acquire>:
 8001920:	4801      	ldr	r0, [pc, #4]	; (8001928 <__sfp_lock_acquire+0x8>)
 8001922:	f000 b8b3 	b.w	8001a8c <__retarget_lock_acquire_recursive>
 8001926:	bf00      	nop
 8001928:	20000169 	.word	0x20000169

0800192c <__sfp_lock_release>:
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <__sfp_lock_release+0x8>)
 800192e:	f000 b8ae 	b.w	8001a8e <__retarget_lock_release_recursive>
 8001932:	bf00      	nop
 8001934:	20000169 	.word	0x20000169

08001938 <__sinit_lock_acquire>:
 8001938:	4801      	ldr	r0, [pc, #4]	; (8001940 <__sinit_lock_acquire+0x8>)
 800193a:	f000 b8a7 	b.w	8001a8c <__retarget_lock_acquire_recursive>
 800193e:	bf00      	nop
 8001940:	2000016a 	.word	0x2000016a

08001944 <__sinit_lock_release>:
 8001944:	4801      	ldr	r0, [pc, #4]	; (800194c <__sinit_lock_release+0x8>)
 8001946:	f000 b8a2 	b.w	8001a8e <__retarget_lock_release_recursive>
 800194a:	bf00      	nop
 800194c:	2000016a 	.word	0x2000016a

08001950 <__sinit>:
 8001950:	b510      	push	{r4, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	f7ff fff0 	bl	8001938 <__sinit_lock_acquire>
 8001958:	69a3      	ldr	r3, [r4, #24]
 800195a:	b11b      	cbz	r3, 8001964 <__sinit+0x14>
 800195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001960:	f7ff bff0 	b.w	8001944 <__sinit_lock_release>
 8001964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001968:	6523      	str	r3, [r4, #80]	; 0x50
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <__sinit+0x68>)
 800196c:	4a13      	ldr	r2, [pc, #76]	; (80019bc <__sinit+0x6c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	62a2      	str	r2, [r4, #40]	; 0x28
 8001972:	42a3      	cmp	r3, r4
 8001974:	bf04      	itt	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	61a3      	streq	r3, [r4, #24]
 800197a:	4620      	mov	r0, r4
 800197c:	f000 f820 	bl	80019c0 <__sfp>
 8001980:	6060      	str	r0, [r4, #4]
 8001982:	4620      	mov	r0, r4
 8001984:	f000 f81c 	bl	80019c0 <__sfp>
 8001988:	60a0      	str	r0, [r4, #8]
 800198a:	4620      	mov	r0, r4
 800198c:	f000 f818 	bl	80019c0 <__sfp>
 8001990:	2200      	movs	r2, #0
 8001992:	60e0      	str	r0, [r4, #12]
 8001994:	2104      	movs	r1, #4
 8001996:	6860      	ldr	r0, [r4, #4]
 8001998:	f7ff ff82 	bl	80018a0 <std>
 800199c:	68a0      	ldr	r0, [r4, #8]
 800199e:	2201      	movs	r2, #1
 80019a0:	2109      	movs	r1, #9
 80019a2:	f7ff ff7d 	bl	80018a0 <std>
 80019a6:	68e0      	ldr	r0, [r4, #12]
 80019a8:	2202      	movs	r2, #2
 80019aa:	2112      	movs	r1, #18
 80019ac:	f7ff ff78 	bl	80018a0 <std>
 80019b0:	2301      	movs	r3, #1
 80019b2:	61a3      	str	r3, [r4, #24]
 80019b4:	e7d2      	b.n	800195c <__sinit+0xc>
 80019b6:	bf00      	nop
 80019b8:	080027cc 	.word	0x080027cc
 80019bc:	080018e9 	.word	0x080018e9

080019c0 <__sfp>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	4607      	mov	r7, r0
 80019c4:	f7ff ffac 	bl	8001920 <__sfp_lock_acquire>
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <__sfp+0x84>)
 80019ca:	681e      	ldr	r6, [r3, #0]
 80019cc:	69b3      	ldr	r3, [r6, #24]
 80019ce:	b913      	cbnz	r3, 80019d6 <__sfp+0x16>
 80019d0:	4630      	mov	r0, r6
 80019d2:	f7ff ffbd 	bl	8001950 <__sinit>
 80019d6:	3648      	adds	r6, #72	; 0x48
 80019d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019dc:	3b01      	subs	r3, #1
 80019de:	d503      	bpl.n	80019e8 <__sfp+0x28>
 80019e0:	6833      	ldr	r3, [r6, #0]
 80019e2:	b30b      	cbz	r3, 8001a28 <__sfp+0x68>
 80019e4:	6836      	ldr	r6, [r6, #0]
 80019e6:	e7f7      	b.n	80019d8 <__sfp+0x18>
 80019e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019ec:	b9d5      	cbnz	r5, 8001a24 <__sfp+0x64>
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <__sfp+0x88>)
 80019f0:	60e3      	str	r3, [r4, #12]
 80019f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019f6:	6665      	str	r5, [r4, #100]	; 0x64
 80019f8:	f000 f847 	bl	8001a8a <__retarget_lock_init_recursive>
 80019fc:	f7ff ff96 	bl	800192c <__sfp_lock_release>
 8001a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a08:	6025      	str	r5, [r4, #0]
 8001a0a:	61a5      	str	r5, [r4, #24]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4629      	mov	r1, r5
 8001a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a14:	f7ff ff24 	bl	8001860 <memset>
 8001a18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a20:	4620      	mov	r0, r4
 8001a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a24:	3468      	adds	r4, #104	; 0x68
 8001a26:	e7d9      	b.n	80019dc <__sfp+0x1c>
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f7ff ff62 	bl	80018f4 <__sfmoreglue>
 8001a30:	4604      	mov	r4, r0
 8001a32:	6030      	str	r0, [r6, #0]
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d1d5      	bne.n	80019e4 <__sfp+0x24>
 8001a38:	f7ff ff78 	bl	800192c <__sfp_lock_release>
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	e7ee      	b.n	8001a20 <__sfp+0x60>
 8001a42:	bf00      	nop
 8001a44:	080027cc 	.word	0x080027cc
 8001a48:	ffff0001 	.word	0xffff0001

08001a4c <_fwalk_reent>:
 8001a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a50:	4606      	mov	r6, r0
 8001a52:	4688      	mov	r8, r1
 8001a54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a58:	2700      	movs	r7, #0
 8001a5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a5e:	f1b9 0901 	subs.w	r9, r9, #1
 8001a62:	d505      	bpl.n	8001a70 <_fwalk_reent+0x24>
 8001a64:	6824      	ldr	r4, [r4, #0]
 8001a66:	2c00      	cmp	r4, #0
 8001a68:	d1f7      	bne.n	8001a5a <_fwalk_reent+0xe>
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a70:	89ab      	ldrh	r3, [r5, #12]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d907      	bls.n	8001a86 <_fwalk_reent+0x3a>
 8001a76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	d003      	beq.n	8001a86 <_fwalk_reent+0x3a>
 8001a7e:	4629      	mov	r1, r5
 8001a80:	4630      	mov	r0, r6
 8001a82:	47c0      	blx	r8
 8001a84:	4307      	orrs	r7, r0
 8001a86:	3568      	adds	r5, #104	; 0x68
 8001a88:	e7e9      	b.n	8001a5e <_fwalk_reent+0x12>

08001a8a <__retarget_lock_init_recursive>:
 8001a8a:	4770      	bx	lr

08001a8c <__retarget_lock_acquire_recursive>:
 8001a8c:	4770      	bx	lr

08001a8e <__retarget_lock_release_recursive>:
 8001a8e:	4770      	bx	lr

08001a90 <sbrk_aligned>:
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	4e0e      	ldr	r6, [pc, #56]	; (8001acc <sbrk_aligned+0x3c>)
 8001a94:	460c      	mov	r4, r1
 8001a96:	6831      	ldr	r1, [r6, #0]
 8001a98:	4605      	mov	r5, r0
 8001a9a:	b911      	cbnz	r1, 8001aa2 <sbrk_aligned+0x12>
 8001a9c:	f000 fb7a 	bl	8002194 <_sbrk_r>
 8001aa0:	6030      	str	r0, [r6, #0]
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f000 fb75 	bl	8002194 <_sbrk_r>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d00a      	beq.n	8001ac4 <sbrk_aligned+0x34>
 8001aae:	1cc4      	adds	r4, r0, #3
 8001ab0:	f024 0403 	bic.w	r4, r4, #3
 8001ab4:	42a0      	cmp	r0, r4
 8001ab6:	d007      	beq.n	8001ac8 <sbrk_aligned+0x38>
 8001ab8:	1a21      	subs	r1, r4, r0
 8001aba:	4628      	mov	r0, r5
 8001abc:	f000 fb6a 	bl	8002194 <_sbrk_r>
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d101      	bne.n	8001ac8 <sbrk_aligned+0x38>
 8001ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ac8:	4620      	mov	r0, r4
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
 8001acc:	20000170 	.word	0x20000170

08001ad0 <_malloc_r>:
 8001ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad4:	1ccd      	adds	r5, r1, #3
 8001ad6:	f025 0503 	bic.w	r5, r5, #3
 8001ada:	3508      	adds	r5, #8
 8001adc:	2d0c      	cmp	r5, #12
 8001ade:	bf38      	it	cc
 8001ae0:	250c      	movcc	r5, #12
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	4607      	mov	r7, r0
 8001ae6:	db01      	blt.n	8001aec <_malloc_r+0x1c>
 8001ae8:	42a9      	cmp	r1, r5
 8001aea:	d905      	bls.n	8001af8 <_malloc_r+0x28>
 8001aec:	230c      	movs	r3, #12
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	2600      	movs	r6, #0
 8001af2:	4630      	mov	r0, r6
 8001af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af8:	4e2e      	ldr	r6, [pc, #184]	; (8001bb4 <_malloc_r+0xe4>)
 8001afa:	f000 fdbb 	bl	8002674 <__malloc_lock>
 8001afe:	6833      	ldr	r3, [r6, #0]
 8001b00:	461c      	mov	r4, r3
 8001b02:	bb34      	cbnz	r4, 8001b52 <_malloc_r+0x82>
 8001b04:	4629      	mov	r1, r5
 8001b06:	4638      	mov	r0, r7
 8001b08:	f7ff ffc2 	bl	8001a90 <sbrk_aligned>
 8001b0c:	1c43      	adds	r3, r0, #1
 8001b0e:	4604      	mov	r4, r0
 8001b10:	d14d      	bne.n	8001bae <_malloc_r+0xde>
 8001b12:	6834      	ldr	r4, [r6, #0]
 8001b14:	4626      	mov	r6, r4
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d140      	bne.n	8001b9c <_malloc_r+0xcc>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	4631      	mov	r1, r6
 8001b1e:	4638      	mov	r0, r7
 8001b20:	eb04 0803 	add.w	r8, r4, r3
 8001b24:	f000 fb36 	bl	8002194 <_sbrk_r>
 8001b28:	4580      	cmp	r8, r0
 8001b2a:	d13a      	bne.n	8001ba2 <_malloc_r+0xd2>
 8001b2c:	6821      	ldr	r1, [r4, #0]
 8001b2e:	3503      	adds	r5, #3
 8001b30:	1a6d      	subs	r5, r5, r1
 8001b32:	f025 0503 	bic.w	r5, r5, #3
 8001b36:	3508      	adds	r5, #8
 8001b38:	2d0c      	cmp	r5, #12
 8001b3a:	bf38      	it	cc
 8001b3c:	250c      	movcc	r5, #12
 8001b3e:	4629      	mov	r1, r5
 8001b40:	4638      	mov	r0, r7
 8001b42:	f7ff ffa5 	bl	8001a90 <sbrk_aligned>
 8001b46:	3001      	adds	r0, #1
 8001b48:	d02b      	beq.n	8001ba2 <_malloc_r+0xd2>
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	442b      	add	r3, r5
 8001b4e:	6023      	str	r3, [r4, #0]
 8001b50:	e00e      	b.n	8001b70 <_malloc_r+0xa0>
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	1b52      	subs	r2, r2, r5
 8001b56:	d41e      	bmi.n	8001b96 <_malloc_r+0xc6>
 8001b58:	2a0b      	cmp	r2, #11
 8001b5a:	d916      	bls.n	8001b8a <_malloc_r+0xba>
 8001b5c:	1961      	adds	r1, r4, r5
 8001b5e:	42a3      	cmp	r3, r4
 8001b60:	6025      	str	r5, [r4, #0]
 8001b62:	bf18      	it	ne
 8001b64:	6059      	strne	r1, [r3, #4]
 8001b66:	6863      	ldr	r3, [r4, #4]
 8001b68:	bf08      	it	eq
 8001b6a:	6031      	streq	r1, [r6, #0]
 8001b6c:	5162      	str	r2, [r4, r5]
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	4638      	mov	r0, r7
 8001b72:	f104 060b 	add.w	r6, r4, #11
 8001b76:	f000 fd83 	bl	8002680 <__malloc_unlock>
 8001b7a:	f026 0607 	bic.w	r6, r6, #7
 8001b7e:	1d23      	adds	r3, r4, #4
 8001b80:	1af2      	subs	r2, r6, r3
 8001b82:	d0b6      	beq.n	8001af2 <_malloc_r+0x22>
 8001b84:	1b9b      	subs	r3, r3, r6
 8001b86:	50a3      	str	r3, [r4, r2]
 8001b88:	e7b3      	b.n	8001af2 <_malloc_r+0x22>
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	42a3      	cmp	r3, r4
 8001b8e:	bf0c      	ite	eq
 8001b90:	6032      	streq	r2, [r6, #0]
 8001b92:	605a      	strne	r2, [r3, #4]
 8001b94:	e7ec      	b.n	8001b70 <_malloc_r+0xa0>
 8001b96:	4623      	mov	r3, r4
 8001b98:	6864      	ldr	r4, [r4, #4]
 8001b9a:	e7b2      	b.n	8001b02 <_malloc_r+0x32>
 8001b9c:	4634      	mov	r4, r6
 8001b9e:	6876      	ldr	r6, [r6, #4]
 8001ba0:	e7b9      	b.n	8001b16 <_malloc_r+0x46>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4638      	mov	r0, r7
 8001ba8:	f000 fd6a 	bl	8002680 <__malloc_unlock>
 8001bac:	e7a1      	b.n	8001af2 <_malloc_r+0x22>
 8001bae:	6025      	str	r5, [r4, #0]
 8001bb0:	e7de      	b.n	8001b70 <_malloc_r+0xa0>
 8001bb2:	bf00      	nop
 8001bb4:	2000016c 	.word	0x2000016c

08001bb8 <__sfputc_r>:
 8001bb8:	6893      	ldr	r3, [r2, #8]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	b410      	push	{r4}
 8001bc0:	6093      	str	r3, [r2, #8]
 8001bc2:	da08      	bge.n	8001bd6 <__sfputc_r+0x1e>
 8001bc4:	6994      	ldr	r4, [r2, #24]
 8001bc6:	42a3      	cmp	r3, r4
 8001bc8:	db01      	blt.n	8001bce <__sfputc_r+0x16>
 8001bca:	290a      	cmp	r1, #10
 8001bcc:	d103      	bne.n	8001bd6 <__sfputc_r+0x1e>
 8001bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bd2:	f000 bb33 	b.w	800223c <__swbuf_r>
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	1c58      	adds	r0, r3, #1
 8001bda:	6010      	str	r0, [r2, #0]
 8001bdc:	7019      	strb	r1, [r3, #0]
 8001bde:	4608      	mov	r0, r1
 8001be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <__sfputs_r>:
 8001be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be8:	4606      	mov	r6, r0
 8001bea:	460f      	mov	r7, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	18d5      	adds	r5, r2, r3
 8001bf0:	42ac      	cmp	r4, r5
 8001bf2:	d101      	bne.n	8001bf8 <__sfputs_r+0x12>
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e007      	b.n	8001c08 <__sfputs_r+0x22>
 8001bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bfc:	463a      	mov	r2, r7
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f7ff ffda 	bl	8001bb8 <__sfputc_r>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d1f3      	bne.n	8001bf0 <__sfputs_r+0xa>
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c0c <_vfiprintf_r>:
 8001c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c10:	460d      	mov	r5, r1
 8001c12:	b09d      	sub	sp, #116	; 0x74
 8001c14:	4614      	mov	r4, r2
 8001c16:	4698      	mov	r8, r3
 8001c18:	4606      	mov	r6, r0
 8001c1a:	b118      	cbz	r0, 8001c24 <_vfiprintf_r+0x18>
 8001c1c:	6983      	ldr	r3, [r0, #24]
 8001c1e:	b90b      	cbnz	r3, 8001c24 <_vfiprintf_r+0x18>
 8001c20:	f7ff fe96 	bl	8001950 <__sinit>
 8001c24:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <_vfiprintf_r+0x240>)
 8001c26:	429d      	cmp	r5, r3
 8001c28:	d11b      	bne.n	8001c62 <_vfiprintf_r+0x56>
 8001c2a:	6875      	ldr	r5, [r6, #4]
 8001c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c2e:	07d9      	lsls	r1, r3, #31
 8001c30:	d405      	bmi.n	8001c3e <_vfiprintf_r+0x32>
 8001c32:	89ab      	ldrh	r3, [r5, #12]
 8001c34:	059a      	lsls	r2, r3, #22
 8001c36:	d402      	bmi.n	8001c3e <_vfiprintf_r+0x32>
 8001c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c3a:	f7ff ff27 	bl	8001a8c <__retarget_lock_acquire_recursive>
 8001c3e:	89ab      	ldrh	r3, [r5, #12]
 8001c40:	071b      	lsls	r3, r3, #28
 8001c42:	d501      	bpl.n	8001c48 <_vfiprintf_r+0x3c>
 8001c44:	692b      	ldr	r3, [r5, #16]
 8001c46:	b9eb      	cbnz	r3, 8001c84 <_vfiprintf_r+0x78>
 8001c48:	4629      	mov	r1, r5
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f000 fb5a 	bl	8002304 <__swsetup_r>
 8001c50:	b1c0      	cbz	r0, 8001c84 <_vfiprintf_r+0x78>
 8001c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c54:	07dc      	lsls	r4, r3, #31
 8001c56:	d50e      	bpl.n	8001c76 <_vfiprintf_r+0x6a>
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	b01d      	add	sp, #116	; 0x74
 8001c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <_vfiprintf_r+0x244>)
 8001c64:	429d      	cmp	r5, r3
 8001c66:	d101      	bne.n	8001c6c <_vfiprintf_r+0x60>
 8001c68:	68b5      	ldr	r5, [r6, #8]
 8001c6a:	e7df      	b.n	8001c2c <_vfiprintf_r+0x20>
 8001c6c:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <_vfiprintf_r+0x248>)
 8001c6e:	429d      	cmp	r5, r3
 8001c70:	bf08      	it	eq
 8001c72:	68f5      	ldreq	r5, [r6, #12]
 8001c74:	e7da      	b.n	8001c2c <_vfiprintf_r+0x20>
 8001c76:	89ab      	ldrh	r3, [r5, #12]
 8001c78:	0598      	lsls	r0, r3, #22
 8001c7a:	d4ed      	bmi.n	8001c58 <_vfiprintf_r+0x4c>
 8001c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c7e:	f7ff ff06 	bl	8001a8e <__retarget_lock_release_recursive>
 8001c82:	e7e9      	b.n	8001c58 <_vfiprintf_r+0x4c>
 8001c84:	2300      	movs	r3, #0
 8001c86:	9309      	str	r3, [sp, #36]	; 0x24
 8001c88:	2320      	movs	r3, #32
 8001c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c92:	2330      	movs	r3, #48	; 0x30
 8001c94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e58 <_vfiprintf_r+0x24c>
 8001c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c9c:	f04f 0901 	mov.w	r9, #1
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ca8:	b10a      	cbz	r2, 8001cae <_vfiprintf_r+0xa2>
 8001caa:	2a25      	cmp	r2, #37	; 0x25
 8001cac:	d1f9      	bne.n	8001ca2 <_vfiprintf_r+0x96>
 8001cae:	ebba 0b04 	subs.w	fp, sl, r4
 8001cb2:	d00b      	beq.n	8001ccc <_vfiprintf_r+0xc0>
 8001cb4:	465b      	mov	r3, fp
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff ff93 	bl	8001be6 <__sfputs_r>
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	f000 80aa 	beq.w	8001e1a <_vfiprintf_r+0x20e>
 8001cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cc8:	445a      	add	r2, fp
 8001cca:	9209      	str	r2, [sp, #36]	; 0x24
 8001ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a2 	beq.w	8001e1a <_vfiprintf_r+0x20e>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ce0:	f10a 0a01 	add.w	sl, sl, #1
 8001ce4:	9304      	str	r3, [sp, #16]
 8001ce6:	9307      	str	r3, [sp, #28]
 8001ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cec:	931a      	str	r3, [sp, #104]	; 0x68
 8001cee:	4654      	mov	r4, sl
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf6:	4858      	ldr	r0, [pc, #352]	; (8001e58 <_vfiprintf_r+0x24c>)
 8001cf8:	f7fe fa9a 	bl	8000230 <memchr>
 8001cfc:	9a04      	ldr	r2, [sp, #16]
 8001cfe:	b9d8      	cbnz	r0, 8001d38 <_vfiprintf_r+0x12c>
 8001d00:	06d1      	lsls	r1, r2, #27
 8001d02:	bf44      	itt	mi
 8001d04:	2320      	movmi	r3, #32
 8001d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d0a:	0713      	lsls	r3, r2, #28
 8001d0c:	bf44      	itt	mi
 8001d0e:	232b      	movmi	r3, #43	; 0x2b
 8001d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d14:	f89a 3000 	ldrb.w	r3, [sl]
 8001d18:	2b2a      	cmp	r3, #42	; 0x2a
 8001d1a:	d015      	beq.n	8001d48 <_vfiprintf_r+0x13c>
 8001d1c:	9a07      	ldr	r2, [sp, #28]
 8001d1e:	4654      	mov	r4, sl
 8001d20:	2000      	movs	r0, #0
 8001d22:	f04f 0c0a 	mov.w	ip, #10
 8001d26:	4621      	mov	r1, r4
 8001d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d2c:	3b30      	subs	r3, #48	; 0x30
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	d94e      	bls.n	8001dd0 <_vfiprintf_r+0x1c4>
 8001d32:	b1b0      	cbz	r0, 8001d62 <_vfiprintf_r+0x156>
 8001d34:	9207      	str	r2, [sp, #28]
 8001d36:	e014      	b.n	8001d62 <_vfiprintf_r+0x156>
 8001d38:	eba0 0308 	sub.w	r3, r0, r8
 8001d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	9304      	str	r3, [sp, #16]
 8001d44:	46a2      	mov	sl, r4
 8001d46:	e7d2      	b.n	8001cee <_vfiprintf_r+0xe2>
 8001d48:	9b03      	ldr	r3, [sp, #12]
 8001d4a:	1d19      	adds	r1, r3, #4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	9103      	str	r1, [sp, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfbb      	ittet	lt
 8001d54:	425b      	neglt	r3, r3
 8001d56:	f042 0202 	orrlt.w	r2, r2, #2
 8001d5a:	9307      	strge	r3, [sp, #28]
 8001d5c:	9307      	strlt	r3, [sp, #28]
 8001d5e:	bfb8      	it	lt
 8001d60:	9204      	strlt	r2, [sp, #16]
 8001d62:	7823      	ldrb	r3, [r4, #0]
 8001d64:	2b2e      	cmp	r3, #46	; 0x2e
 8001d66:	d10c      	bne.n	8001d82 <_vfiprintf_r+0x176>
 8001d68:	7863      	ldrb	r3, [r4, #1]
 8001d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d6c:	d135      	bne.n	8001dda <_vfiprintf_r+0x1ce>
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	1d1a      	adds	r2, r3, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	9203      	str	r2, [sp, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bfb8      	it	lt
 8001d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d7e:	3402      	adds	r4, #2
 8001d80:	9305      	str	r3, [sp, #20]
 8001d82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e68 <_vfiprintf_r+0x25c>
 8001d86:	7821      	ldrb	r1, [r4, #0]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4650      	mov	r0, sl
 8001d8c:	f7fe fa50 	bl	8000230 <memchr>
 8001d90:	b140      	cbz	r0, 8001da4 <_vfiprintf_r+0x198>
 8001d92:	2340      	movs	r3, #64	; 0x40
 8001d94:	eba0 000a 	sub.w	r0, r0, sl
 8001d98:	fa03 f000 	lsl.w	r0, r3, r0
 8001d9c:	9b04      	ldr	r3, [sp, #16]
 8001d9e:	4303      	orrs	r3, r0
 8001da0:	3401      	adds	r4, #1
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001da8:	482c      	ldr	r0, [pc, #176]	; (8001e5c <_vfiprintf_r+0x250>)
 8001daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dae:	2206      	movs	r2, #6
 8001db0:	f7fe fa3e 	bl	8000230 <memchr>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d03f      	beq.n	8001e38 <_vfiprintf_r+0x22c>
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <_vfiprintf_r+0x254>)
 8001dba:	bb1b      	cbnz	r3, 8001e04 <_vfiprintf_r+0x1f8>
 8001dbc:	9b03      	ldr	r3, [sp, #12]
 8001dbe:	3307      	adds	r3, #7
 8001dc0:	f023 0307 	bic.w	r3, r3, #7
 8001dc4:	3308      	adds	r3, #8
 8001dc6:	9303      	str	r3, [sp, #12]
 8001dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dca:	443b      	add	r3, r7
 8001dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8001dce:	e767      	b.n	8001ca0 <_vfiprintf_r+0x94>
 8001dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e7a5      	b.n	8001d26 <_vfiprintf_r+0x11a>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	3401      	adds	r4, #1
 8001dde:	9305      	str	r3, [sp, #20]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 0c0a 	mov.w	ip, #10
 8001de6:	4620      	mov	r0, r4
 8001de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dec:	3a30      	subs	r2, #48	; 0x30
 8001dee:	2a09      	cmp	r2, #9
 8001df0:	d903      	bls.n	8001dfa <_vfiprintf_r+0x1ee>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0c5      	beq.n	8001d82 <_vfiprintf_r+0x176>
 8001df6:	9105      	str	r1, [sp, #20]
 8001df8:	e7c3      	b.n	8001d82 <_vfiprintf_r+0x176>
 8001dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dfe:	4604      	mov	r4, r0
 8001e00:	2301      	movs	r3, #1
 8001e02:	e7f0      	b.n	8001de6 <_vfiprintf_r+0x1da>
 8001e04:	ab03      	add	r3, sp, #12
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	462a      	mov	r2, r5
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <_vfiprintf_r+0x258>)
 8001e0c:	a904      	add	r1, sp, #16
 8001e0e:	4630      	mov	r0, r6
 8001e10:	f3af 8000 	nop.w
 8001e14:	4607      	mov	r7, r0
 8001e16:	1c78      	adds	r0, r7, #1
 8001e18:	d1d6      	bne.n	8001dc8 <_vfiprintf_r+0x1bc>
 8001e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e1c:	07d9      	lsls	r1, r3, #31
 8001e1e:	d405      	bmi.n	8001e2c <_vfiprintf_r+0x220>
 8001e20:	89ab      	ldrh	r3, [r5, #12]
 8001e22:	059a      	lsls	r2, r3, #22
 8001e24:	d402      	bmi.n	8001e2c <_vfiprintf_r+0x220>
 8001e26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e28:	f7ff fe31 	bl	8001a8e <__retarget_lock_release_recursive>
 8001e2c:	89ab      	ldrh	r3, [r5, #12]
 8001e2e:	065b      	lsls	r3, r3, #25
 8001e30:	f53f af12 	bmi.w	8001c58 <_vfiprintf_r+0x4c>
 8001e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e36:	e711      	b.n	8001c5c <_vfiprintf_r+0x50>
 8001e38:	ab03      	add	r3, sp, #12
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	462a      	mov	r2, r5
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <_vfiprintf_r+0x258>)
 8001e40:	a904      	add	r1, sp, #16
 8001e42:	4630      	mov	r0, r6
 8001e44:	f000 f880 	bl	8001f48 <_printf_i>
 8001e48:	e7e4      	b.n	8001e14 <_vfiprintf_r+0x208>
 8001e4a:	bf00      	nop
 8001e4c:	080027f0 	.word	0x080027f0
 8001e50:	08002810 	.word	0x08002810
 8001e54:	080027d0 	.word	0x080027d0
 8001e58:	08002830 	.word	0x08002830
 8001e5c:	0800283a 	.word	0x0800283a
 8001e60:	00000000 	.word	0x00000000
 8001e64:	08001be7 	.word	0x08001be7
 8001e68:	08002836 	.word	0x08002836

08001e6c <_printf_common>:
 8001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e70:	4616      	mov	r6, r2
 8001e72:	4699      	mov	r9, r3
 8001e74:	688a      	ldr	r2, [r1, #8]
 8001e76:	690b      	ldr	r3, [r1, #16]
 8001e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bfb8      	it	lt
 8001e80:	4613      	movlt	r3, r2
 8001e82:	6033      	str	r3, [r6, #0]
 8001e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e88:	4607      	mov	r7, r0
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	b10a      	cbz	r2, 8001e92 <_printf_common+0x26>
 8001e8e:	3301      	adds	r3, #1
 8001e90:	6033      	str	r3, [r6, #0]
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	0699      	lsls	r1, r3, #26
 8001e96:	bf42      	ittt	mi
 8001e98:	6833      	ldrmi	r3, [r6, #0]
 8001e9a:	3302      	addmi	r3, #2
 8001e9c:	6033      	strmi	r3, [r6, #0]
 8001e9e:	6825      	ldr	r5, [r4, #0]
 8001ea0:	f015 0506 	ands.w	r5, r5, #6
 8001ea4:	d106      	bne.n	8001eb4 <_printf_common+0x48>
 8001ea6:	f104 0a19 	add.w	sl, r4, #25
 8001eaa:	68e3      	ldr	r3, [r4, #12]
 8001eac:	6832      	ldr	r2, [r6, #0]
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	42ab      	cmp	r3, r5
 8001eb2:	dc26      	bgt.n	8001f02 <_printf_common+0x96>
 8001eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001eb8:	1e13      	subs	r3, r2, #0
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	bf18      	it	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	0692      	lsls	r2, r2, #26
 8001ec2:	d42b      	bmi.n	8001f1c <_printf_common+0xb0>
 8001ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ec8:	4649      	mov	r1, r9
 8001eca:	4638      	mov	r0, r7
 8001ecc:	47c0      	blx	r8
 8001ece:	3001      	adds	r0, #1
 8001ed0:	d01e      	beq.n	8001f10 <_printf_common+0xa4>
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	68e5      	ldr	r5, [r4, #12]
 8001ed6:	6832      	ldr	r2, [r6, #0]
 8001ed8:	f003 0306 	and.w	r3, r3, #6
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	bf08      	it	eq
 8001ee0:	1aad      	subeq	r5, r5, r2
 8001ee2:	68a3      	ldr	r3, [r4, #8]
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	bf0c      	ite	eq
 8001ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001eec:	2500      	movne	r5, #0
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	bfc4      	itt	gt
 8001ef2:	1a9b      	subgt	r3, r3, r2
 8001ef4:	18ed      	addgt	r5, r5, r3
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	341a      	adds	r4, #26
 8001efa:	42b5      	cmp	r5, r6
 8001efc:	d11a      	bne.n	8001f34 <_printf_common+0xc8>
 8001efe:	2000      	movs	r0, #0
 8001f00:	e008      	b.n	8001f14 <_printf_common+0xa8>
 8001f02:	2301      	movs	r3, #1
 8001f04:	4652      	mov	r2, sl
 8001f06:	4649      	mov	r1, r9
 8001f08:	4638      	mov	r0, r7
 8001f0a:	47c0      	blx	r8
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d103      	bne.n	8001f18 <_printf_common+0xac>
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f18:	3501      	adds	r5, #1
 8001f1a:	e7c6      	b.n	8001eaa <_printf_common+0x3e>
 8001f1c:	18e1      	adds	r1, r4, r3
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	2030      	movs	r0, #48	; 0x30
 8001f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f26:	4422      	add	r2, r4
 8001f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f30:	3302      	adds	r3, #2
 8001f32:	e7c7      	b.n	8001ec4 <_printf_common+0x58>
 8001f34:	2301      	movs	r3, #1
 8001f36:	4622      	mov	r2, r4
 8001f38:	4649      	mov	r1, r9
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	47c0      	blx	r8
 8001f3e:	3001      	adds	r0, #1
 8001f40:	d0e6      	beq.n	8001f10 <_printf_common+0xa4>
 8001f42:	3601      	adds	r6, #1
 8001f44:	e7d9      	b.n	8001efa <_printf_common+0x8e>
	...

08001f48 <_printf_i>:
 8001f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f4c:	7e0f      	ldrb	r7, [r1, #24]
 8001f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f50:	2f78      	cmp	r7, #120	; 0x78
 8001f52:	4691      	mov	r9, r2
 8001f54:	4680      	mov	r8, r0
 8001f56:	460c      	mov	r4, r1
 8001f58:	469a      	mov	sl, r3
 8001f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f5e:	d807      	bhi.n	8001f70 <_printf_i+0x28>
 8001f60:	2f62      	cmp	r7, #98	; 0x62
 8001f62:	d80a      	bhi.n	8001f7a <_printf_i+0x32>
 8001f64:	2f00      	cmp	r7, #0
 8001f66:	f000 80d8 	beq.w	800211a <_printf_i+0x1d2>
 8001f6a:	2f58      	cmp	r7, #88	; 0x58
 8001f6c:	f000 80a3 	beq.w	80020b6 <_printf_i+0x16e>
 8001f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f78:	e03a      	b.n	8001ff0 <_printf_i+0xa8>
 8001f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f7e:	2b15      	cmp	r3, #21
 8001f80:	d8f6      	bhi.n	8001f70 <_printf_i+0x28>
 8001f82:	a101      	add	r1, pc, #4	; (adr r1, 8001f88 <_printf_i+0x40>)
 8001f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f88:	08001fe1 	.word	0x08001fe1
 8001f8c:	08001ff5 	.word	0x08001ff5
 8001f90:	08001f71 	.word	0x08001f71
 8001f94:	08001f71 	.word	0x08001f71
 8001f98:	08001f71 	.word	0x08001f71
 8001f9c:	08001f71 	.word	0x08001f71
 8001fa0:	08001ff5 	.word	0x08001ff5
 8001fa4:	08001f71 	.word	0x08001f71
 8001fa8:	08001f71 	.word	0x08001f71
 8001fac:	08001f71 	.word	0x08001f71
 8001fb0:	08001f71 	.word	0x08001f71
 8001fb4:	08002101 	.word	0x08002101
 8001fb8:	08002025 	.word	0x08002025
 8001fbc:	080020e3 	.word	0x080020e3
 8001fc0:	08001f71 	.word	0x08001f71
 8001fc4:	08001f71 	.word	0x08001f71
 8001fc8:	08002123 	.word	0x08002123
 8001fcc:	08001f71 	.word	0x08001f71
 8001fd0:	08002025 	.word	0x08002025
 8001fd4:	08001f71 	.word	0x08001f71
 8001fd8:	08001f71 	.word	0x08001f71
 8001fdc:	080020eb 	.word	0x080020eb
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	602a      	str	r2, [r5, #0]
 8001fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0a3      	b.n	800213c <_printf_i+0x1f4>
 8001ff4:	6820      	ldr	r0, [r4, #0]
 8001ff6:	6829      	ldr	r1, [r5, #0]
 8001ff8:	0606      	lsls	r6, r0, #24
 8001ffa:	f101 0304 	add.w	r3, r1, #4
 8001ffe:	d50a      	bpl.n	8002016 <_printf_i+0xce>
 8002000:	680e      	ldr	r6, [r1, #0]
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	2e00      	cmp	r6, #0
 8002006:	da03      	bge.n	8002010 <_printf_i+0xc8>
 8002008:	232d      	movs	r3, #45	; 0x2d
 800200a:	4276      	negs	r6, r6
 800200c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002010:	485e      	ldr	r0, [pc, #376]	; (800218c <_printf_i+0x244>)
 8002012:	230a      	movs	r3, #10
 8002014:	e019      	b.n	800204a <_printf_i+0x102>
 8002016:	680e      	ldr	r6, [r1, #0]
 8002018:	602b      	str	r3, [r5, #0]
 800201a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800201e:	bf18      	it	ne
 8002020:	b236      	sxthne	r6, r6
 8002022:	e7ef      	b.n	8002004 <_printf_i+0xbc>
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	6820      	ldr	r0, [r4, #0]
 8002028:	1d19      	adds	r1, r3, #4
 800202a:	6029      	str	r1, [r5, #0]
 800202c:	0601      	lsls	r1, r0, #24
 800202e:	d501      	bpl.n	8002034 <_printf_i+0xec>
 8002030:	681e      	ldr	r6, [r3, #0]
 8002032:	e002      	b.n	800203a <_printf_i+0xf2>
 8002034:	0646      	lsls	r6, r0, #25
 8002036:	d5fb      	bpl.n	8002030 <_printf_i+0xe8>
 8002038:	881e      	ldrh	r6, [r3, #0]
 800203a:	4854      	ldr	r0, [pc, #336]	; (800218c <_printf_i+0x244>)
 800203c:	2f6f      	cmp	r7, #111	; 0x6f
 800203e:	bf0c      	ite	eq
 8002040:	2308      	moveq	r3, #8
 8002042:	230a      	movne	r3, #10
 8002044:	2100      	movs	r1, #0
 8002046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800204a:	6865      	ldr	r5, [r4, #4]
 800204c:	60a5      	str	r5, [r4, #8]
 800204e:	2d00      	cmp	r5, #0
 8002050:	bfa2      	ittt	ge
 8002052:	6821      	ldrge	r1, [r4, #0]
 8002054:	f021 0104 	bicge.w	r1, r1, #4
 8002058:	6021      	strge	r1, [r4, #0]
 800205a:	b90e      	cbnz	r6, 8002060 <_printf_i+0x118>
 800205c:	2d00      	cmp	r5, #0
 800205e:	d04d      	beq.n	80020fc <_printf_i+0x1b4>
 8002060:	4615      	mov	r5, r2
 8002062:	fbb6 f1f3 	udiv	r1, r6, r3
 8002066:	fb03 6711 	mls	r7, r3, r1, r6
 800206a:	5dc7      	ldrb	r7, [r0, r7]
 800206c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002070:	4637      	mov	r7, r6
 8002072:	42bb      	cmp	r3, r7
 8002074:	460e      	mov	r6, r1
 8002076:	d9f4      	bls.n	8002062 <_printf_i+0x11a>
 8002078:	2b08      	cmp	r3, #8
 800207a:	d10b      	bne.n	8002094 <_printf_i+0x14c>
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	07de      	lsls	r6, r3, #31
 8002080:	d508      	bpl.n	8002094 <_printf_i+0x14c>
 8002082:	6923      	ldr	r3, [r4, #16]
 8002084:	6861      	ldr	r1, [r4, #4]
 8002086:	4299      	cmp	r1, r3
 8002088:	bfde      	ittt	le
 800208a:	2330      	movle	r3, #48	; 0x30
 800208c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002094:	1b52      	subs	r2, r2, r5
 8002096:	6122      	str	r2, [r4, #16]
 8002098:	f8cd a000 	str.w	sl, [sp]
 800209c:	464b      	mov	r3, r9
 800209e:	aa03      	add	r2, sp, #12
 80020a0:	4621      	mov	r1, r4
 80020a2:	4640      	mov	r0, r8
 80020a4:	f7ff fee2 	bl	8001e6c <_printf_common>
 80020a8:	3001      	adds	r0, #1
 80020aa:	d14c      	bne.n	8002146 <_printf_i+0x1fe>
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	b004      	add	sp, #16
 80020b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020b6:	4835      	ldr	r0, [pc, #212]	; (800218c <_printf_i+0x244>)
 80020b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80020bc:	6829      	ldr	r1, [r5, #0]
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80020c4:	6029      	str	r1, [r5, #0]
 80020c6:	061d      	lsls	r5, r3, #24
 80020c8:	d514      	bpl.n	80020f4 <_printf_i+0x1ac>
 80020ca:	07df      	lsls	r7, r3, #31
 80020cc:	bf44      	itt	mi
 80020ce:	f043 0320 	orrmi.w	r3, r3, #32
 80020d2:	6023      	strmi	r3, [r4, #0]
 80020d4:	b91e      	cbnz	r6, 80020de <_printf_i+0x196>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f023 0320 	bic.w	r3, r3, #32
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	2310      	movs	r3, #16
 80020e0:	e7b0      	b.n	8002044 <_printf_i+0xfc>
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	2378      	movs	r3, #120	; 0x78
 80020ec:	4828      	ldr	r0, [pc, #160]	; (8002190 <_printf_i+0x248>)
 80020ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020f2:	e7e3      	b.n	80020bc <_printf_i+0x174>
 80020f4:	0659      	lsls	r1, r3, #25
 80020f6:	bf48      	it	mi
 80020f8:	b2b6      	uxthmi	r6, r6
 80020fa:	e7e6      	b.n	80020ca <_printf_i+0x182>
 80020fc:	4615      	mov	r5, r2
 80020fe:	e7bb      	b.n	8002078 <_printf_i+0x130>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	6826      	ldr	r6, [r4, #0]
 8002104:	6961      	ldr	r1, [r4, #20]
 8002106:	1d18      	adds	r0, r3, #4
 8002108:	6028      	str	r0, [r5, #0]
 800210a:	0635      	lsls	r5, r6, #24
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	d501      	bpl.n	8002114 <_printf_i+0x1cc>
 8002110:	6019      	str	r1, [r3, #0]
 8002112:	e002      	b.n	800211a <_printf_i+0x1d2>
 8002114:	0670      	lsls	r0, r6, #25
 8002116:	d5fb      	bpl.n	8002110 <_printf_i+0x1c8>
 8002118:	8019      	strh	r1, [r3, #0]
 800211a:	2300      	movs	r3, #0
 800211c:	6123      	str	r3, [r4, #16]
 800211e:	4615      	mov	r5, r2
 8002120:	e7ba      	b.n	8002098 <_printf_i+0x150>
 8002122:	682b      	ldr	r3, [r5, #0]
 8002124:	1d1a      	adds	r2, r3, #4
 8002126:	602a      	str	r2, [r5, #0]
 8002128:	681d      	ldr	r5, [r3, #0]
 800212a:	6862      	ldr	r2, [r4, #4]
 800212c:	2100      	movs	r1, #0
 800212e:	4628      	mov	r0, r5
 8002130:	f7fe f87e 	bl	8000230 <memchr>
 8002134:	b108      	cbz	r0, 800213a <_printf_i+0x1f2>
 8002136:	1b40      	subs	r0, r0, r5
 8002138:	6060      	str	r0, [r4, #4]
 800213a:	6863      	ldr	r3, [r4, #4]
 800213c:	6123      	str	r3, [r4, #16]
 800213e:	2300      	movs	r3, #0
 8002140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002144:	e7a8      	b.n	8002098 <_printf_i+0x150>
 8002146:	6923      	ldr	r3, [r4, #16]
 8002148:	462a      	mov	r2, r5
 800214a:	4649      	mov	r1, r9
 800214c:	4640      	mov	r0, r8
 800214e:	47d0      	blx	sl
 8002150:	3001      	adds	r0, #1
 8002152:	d0ab      	beq.n	80020ac <_printf_i+0x164>
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	079b      	lsls	r3, r3, #30
 8002158:	d413      	bmi.n	8002182 <_printf_i+0x23a>
 800215a:	68e0      	ldr	r0, [r4, #12]
 800215c:	9b03      	ldr	r3, [sp, #12]
 800215e:	4298      	cmp	r0, r3
 8002160:	bfb8      	it	lt
 8002162:	4618      	movlt	r0, r3
 8002164:	e7a4      	b.n	80020b0 <_printf_i+0x168>
 8002166:	2301      	movs	r3, #1
 8002168:	4632      	mov	r2, r6
 800216a:	4649      	mov	r1, r9
 800216c:	4640      	mov	r0, r8
 800216e:	47d0      	blx	sl
 8002170:	3001      	adds	r0, #1
 8002172:	d09b      	beq.n	80020ac <_printf_i+0x164>
 8002174:	3501      	adds	r5, #1
 8002176:	68e3      	ldr	r3, [r4, #12]
 8002178:	9903      	ldr	r1, [sp, #12]
 800217a:	1a5b      	subs	r3, r3, r1
 800217c:	42ab      	cmp	r3, r5
 800217e:	dcf2      	bgt.n	8002166 <_printf_i+0x21e>
 8002180:	e7eb      	b.n	800215a <_printf_i+0x212>
 8002182:	2500      	movs	r5, #0
 8002184:	f104 0619 	add.w	r6, r4, #25
 8002188:	e7f5      	b.n	8002176 <_printf_i+0x22e>
 800218a:	bf00      	nop
 800218c:	08002841 	.word	0x08002841
 8002190:	08002852 	.word	0x08002852

08002194 <_sbrk_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4d06      	ldr	r5, [pc, #24]	; (80021b0 <_sbrk_r+0x1c>)
 8002198:	2300      	movs	r3, #0
 800219a:	4604      	mov	r4, r0
 800219c:	4608      	mov	r0, r1
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	f7fe fbd2 	bl	8000948 <_sbrk>
 80021a4:	1c43      	adds	r3, r0, #1
 80021a6:	d102      	bne.n	80021ae <_sbrk_r+0x1a>
 80021a8:	682b      	ldr	r3, [r5, #0]
 80021aa:	b103      	cbz	r3, 80021ae <_sbrk_r+0x1a>
 80021ac:	6023      	str	r3, [r4, #0]
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	20000174 	.word	0x20000174

080021b4 <__sread>:
 80021b4:	b510      	push	{r4, lr}
 80021b6:	460c      	mov	r4, r1
 80021b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021bc:	f000 fab2 	bl	8002724 <_read_r>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	bfab      	itete	ge
 80021c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021c6:	89a3      	ldrhlt	r3, [r4, #12]
 80021c8:	181b      	addge	r3, r3, r0
 80021ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021ce:	bfac      	ite	ge
 80021d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80021d2:	81a3      	strhlt	r3, [r4, #12]
 80021d4:	bd10      	pop	{r4, pc}

080021d6 <__swrite>:
 80021d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021da:	461f      	mov	r7, r3
 80021dc:	898b      	ldrh	r3, [r1, #12]
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	4605      	mov	r5, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	4616      	mov	r6, r2
 80021e6:	d505      	bpl.n	80021f4 <__swrite+0x1e>
 80021e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ec:	2302      	movs	r3, #2
 80021ee:	2200      	movs	r2, #0
 80021f0:	f000 f9c8 	bl	8002584 <_lseek_r>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021fe:	81a3      	strh	r3, [r4, #12]
 8002200:	4632      	mov	r2, r6
 8002202:	463b      	mov	r3, r7
 8002204:	4628      	mov	r0, r5
 8002206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800220a:	f000 b869 	b.w	80022e0 <_write_r>

0800220e <__sseek>:
 800220e:	b510      	push	{r4, lr}
 8002210:	460c      	mov	r4, r1
 8002212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002216:	f000 f9b5 	bl	8002584 <_lseek_r>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	bf15      	itete	ne
 8002220:	6560      	strne	r0, [r4, #84]	; 0x54
 8002222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800222a:	81a3      	strheq	r3, [r4, #12]
 800222c:	bf18      	it	ne
 800222e:	81a3      	strhne	r3, [r4, #12]
 8002230:	bd10      	pop	{r4, pc}

08002232 <__sclose>:
 8002232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002236:	f000 b8d3 	b.w	80023e0 <_close_r>
	...

0800223c <__swbuf_r>:
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223e:	460e      	mov	r6, r1
 8002240:	4614      	mov	r4, r2
 8002242:	4605      	mov	r5, r0
 8002244:	b118      	cbz	r0, 800224e <__swbuf_r+0x12>
 8002246:	6983      	ldr	r3, [r0, #24]
 8002248:	b90b      	cbnz	r3, 800224e <__swbuf_r+0x12>
 800224a:	f7ff fb81 	bl	8001950 <__sinit>
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <__swbuf_r+0x98>)
 8002250:	429c      	cmp	r4, r3
 8002252:	d12b      	bne.n	80022ac <__swbuf_r+0x70>
 8002254:	686c      	ldr	r4, [r5, #4]
 8002256:	69a3      	ldr	r3, [r4, #24]
 8002258:	60a3      	str	r3, [r4, #8]
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	071a      	lsls	r2, r3, #28
 800225e:	d52f      	bpl.n	80022c0 <__swbuf_r+0x84>
 8002260:	6923      	ldr	r3, [r4, #16]
 8002262:	b36b      	cbz	r3, 80022c0 <__swbuf_r+0x84>
 8002264:	6923      	ldr	r3, [r4, #16]
 8002266:	6820      	ldr	r0, [r4, #0]
 8002268:	1ac0      	subs	r0, r0, r3
 800226a:	6963      	ldr	r3, [r4, #20]
 800226c:	b2f6      	uxtb	r6, r6
 800226e:	4283      	cmp	r3, r0
 8002270:	4637      	mov	r7, r6
 8002272:	dc04      	bgt.n	800227e <__swbuf_r+0x42>
 8002274:	4621      	mov	r1, r4
 8002276:	4628      	mov	r0, r5
 8002278:	f000 f948 	bl	800250c <_fflush_r>
 800227c:	bb30      	cbnz	r0, 80022cc <__swbuf_r+0x90>
 800227e:	68a3      	ldr	r3, [r4, #8]
 8002280:	3b01      	subs	r3, #1
 8002282:	60a3      	str	r3, [r4, #8]
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	6022      	str	r2, [r4, #0]
 800228a:	701e      	strb	r6, [r3, #0]
 800228c:	6963      	ldr	r3, [r4, #20]
 800228e:	3001      	adds	r0, #1
 8002290:	4283      	cmp	r3, r0
 8002292:	d004      	beq.n	800229e <__swbuf_r+0x62>
 8002294:	89a3      	ldrh	r3, [r4, #12]
 8002296:	07db      	lsls	r3, r3, #31
 8002298:	d506      	bpl.n	80022a8 <__swbuf_r+0x6c>
 800229a:	2e0a      	cmp	r6, #10
 800229c:	d104      	bne.n	80022a8 <__swbuf_r+0x6c>
 800229e:	4621      	mov	r1, r4
 80022a0:	4628      	mov	r0, r5
 80022a2:	f000 f933 	bl	800250c <_fflush_r>
 80022a6:	b988      	cbnz	r0, 80022cc <__swbuf_r+0x90>
 80022a8:	4638      	mov	r0, r7
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <__swbuf_r+0x9c>)
 80022ae:	429c      	cmp	r4, r3
 80022b0:	d101      	bne.n	80022b6 <__swbuf_r+0x7a>
 80022b2:	68ac      	ldr	r4, [r5, #8]
 80022b4:	e7cf      	b.n	8002256 <__swbuf_r+0x1a>
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <__swbuf_r+0xa0>)
 80022b8:	429c      	cmp	r4, r3
 80022ba:	bf08      	it	eq
 80022bc:	68ec      	ldreq	r4, [r5, #12]
 80022be:	e7ca      	b.n	8002256 <__swbuf_r+0x1a>
 80022c0:	4621      	mov	r1, r4
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 f81e 	bl	8002304 <__swsetup_r>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d0cb      	beq.n	8002264 <__swbuf_r+0x28>
 80022cc:	f04f 37ff 	mov.w	r7, #4294967295
 80022d0:	e7ea      	b.n	80022a8 <__swbuf_r+0x6c>
 80022d2:	bf00      	nop
 80022d4:	080027f0 	.word	0x080027f0
 80022d8:	08002810 	.word	0x08002810
 80022dc:	080027d0 	.word	0x080027d0

080022e0 <_write_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	4d07      	ldr	r5, [pc, #28]	; (8002300 <_write_r+0x20>)
 80022e4:	4604      	mov	r4, r0
 80022e6:	4608      	mov	r0, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	2200      	movs	r2, #0
 80022ec:	602a      	str	r2, [r5, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f7fe fb11 	bl	8000916 <_write>
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	d102      	bne.n	80022fe <_write_r+0x1e>
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	b103      	cbz	r3, 80022fe <_write_r+0x1e>
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	20000174 	.word	0x20000174

08002304 <__swsetup_r>:
 8002304:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <__swsetup_r+0xcc>)
 8002306:	b570      	push	{r4, r5, r6, lr}
 8002308:	681d      	ldr	r5, [r3, #0]
 800230a:	4606      	mov	r6, r0
 800230c:	460c      	mov	r4, r1
 800230e:	b125      	cbz	r5, 800231a <__swsetup_r+0x16>
 8002310:	69ab      	ldr	r3, [r5, #24]
 8002312:	b913      	cbnz	r3, 800231a <__swsetup_r+0x16>
 8002314:	4628      	mov	r0, r5
 8002316:	f7ff fb1b 	bl	8001950 <__sinit>
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <__swsetup_r+0xd0>)
 800231c:	429c      	cmp	r4, r3
 800231e:	d10f      	bne.n	8002340 <__swsetup_r+0x3c>
 8002320:	686c      	ldr	r4, [r5, #4]
 8002322:	89a3      	ldrh	r3, [r4, #12]
 8002324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002328:	0719      	lsls	r1, r3, #28
 800232a:	d42c      	bmi.n	8002386 <__swsetup_r+0x82>
 800232c:	06dd      	lsls	r5, r3, #27
 800232e:	d411      	bmi.n	8002354 <__swsetup_r+0x50>
 8002330:	2309      	movs	r3, #9
 8002332:	6033      	str	r3, [r6, #0]
 8002334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002338:	81a3      	strh	r3, [r4, #12]
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	e03e      	b.n	80023be <__swsetup_r+0xba>
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <__swsetup_r+0xd4>)
 8002342:	429c      	cmp	r4, r3
 8002344:	d101      	bne.n	800234a <__swsetup_r+0x46>
 8002346:	68ac      	ldr	r4, [r5, #8]
 8002348:	e7eb      	b.n	8002322 <__swsetup_r+0x1e>
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <__swsetup_r+0xd8>)
 800234c:	429c      	cmp	r4, r3
 800234e:	bf08      	it	eq
 8002350:	68ec      	ldreq	r4, [r5, #12]
 8002352:	e7e6      	b.n	8002322 <__swsetup_r+0x1e>
 8002354:	0758      	lsls	r0, r3, #29
 8002356:	d512      	bpl.n	800237e <__swsetup_r+0x7a>
 8002358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800235a:	b141      	cbz	r1, 800236e <__swsetup_r+0x6a>
 800235c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002360:	4299      	cmp	r1, r3
 8002362:	d002      	beq.n	800236a <__swsetup_r+0x66>
 8002364:	4630      	mov	r0, r6
 8002366:	f000 f991 	bl	800268c <_free_r>
 800236a:	2300      	movs	r3, #0
 800236c:	6363      	str	r3, [r4, #52]	; 0x34
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	2300      	movs	r3, #0
 8002378:	6063      	str	r3, [r4, #4]
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	81a3      	strh	r3, [r4, #12]
 8002386:	6923      	ldr	r3, [r4, #16]
 8002388:	b94b      	cbnz	r3, 800239e <__swsetup_r+0x9a>
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d003      	beq.n	800239e <__swsetup_r+0x9a>
 8002396:	4621      	mov	r1, r4
 8002398:	4630      	mov	r0, r6
 800239a:	f000 f92b 	bl	80025f4 <__smakebuf_r>
 800239e:	89a0      	ldrh	r0, [r4, #12]
 80023a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023a4:	f010 0301 	ands.w	r3, r0, #1
 80023a8:	d00a      	beq.n	80023c0 <__swsetup_r+0xbc>
 80023aa:	2300      	movs	r3, #0
 80023ac:	60a3      	str	r3, [r4, #8]
 80023ae:	6963      	ldr	r3, [r4, #20]
 80023b0:	425b      	negs	r3, r3
 80023b2:	61a3      	str	r3, [r4, #24]
 80023b4:	6923      	ldr	r3, [r4, #16]
 80023b6:	b943      	cbnz	r3, 80023ca <__swsetup_r+0xc6>
 80023b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023bc:	d1ba      	bne.n	8002334 <__swsetup_r+0x30>
 80023be:	bd70      	pop	{r4, r5, r6, pc}
 80023c0:	0781      	lsls	r1, r0, #30
 80023c2:	bf58      	it	pl
 80023c4:	6963      	ldrpl	r3, [r4, #20]
 80023c6:	60a3      	str	r3, [r4, #8]
 80023c8:	e7f4      	b.n	80023b4 <__swsetup_r+0xb0>
 80023ca:	2000      	movs	r0, #0
 80023cc:	e7f7      	b.n	80023be <__swsetup_r+0xba>
 80023ce:	bf00      	nop
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	080027f0 	.word	0x080027f0
 80023d8:	08002810 	.word	0x08002810
 80023dc:	080027d0 	.word	0x080027d0

080023e0 <_close_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4d06      	ldr	r5, [pc, #24]	; (80023fc <_close_r+0x1c>)
 80023e4:	2300      	movs	r3, #0
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	602b      	str	r3, [r5, #0]
 80023ec:	f7fe faa0 	bl	8000930 <_close>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_close_r+0x1a>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_close_r+0x1a>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	20000174 	.word	0x20000174

08002400 <__sflush_r>:
 8002400:	898a      	ldrh	r2, [r1, #12]
 8002402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002406:	4605      	mov	r5, r0
 8002408:	0710      	lsls	r0, r2, #28
 800240a:	460c      	mov	r4, r1
 800240c:	d458      	bmi.n	80024c0 <__sflush_r+0xc0>
 800240e:	684b      	ldr	r3, [r1, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	dc05      	bgt.n	8002420 <__sflush_r+0x20>
 8002414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	dc02      	bgt.n	8002420 <__sflush_r+0x20>
 800241a:	2000      	movs	r0, #0
 800241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002422:	2e00      	cmp	r6, #0
 8002424:	d0f9      	beq.n	800241a <__sflush_r+0x1a>
 8002426:	2300      	movs	r3, #0
 8002428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800242c:	682f      	ldr	r7, [r5, #0]
 800242e:	602b      	str	r3, [r5, #0]
 8002430:	d032      	beq.n	8002498 <__sflush_r+0x98>
 8002432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	075a      	lsls	r2, r3, #29
 8002438:	d505      	bpl.n	8002446 <__sflush_r+0x46>
 800243a:	6863      	ldr	r3, [r4, #4]
 800243c:	1ac0      	subs	r0, r0, r3
 800243e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002440:	b10b      	cbz	r3, 8002446 <__sflush_r+0x46>
 8002442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002444:	1ac0      	subs	r0, r0, r3
 8002446:	2300      	movs	r3, #0
 8002448:	4602      	mov	r2, r0
 800244a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800244c:	6a21      	ldr	r1, [r4, #32]
 800244e:	4628      	mov	r0, r5
 8002450:	47b0      	blx	r6
 8002452:	1c43      	adds	r3, r0, #1
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	d106      	bne.n	8002466 <__sflush_r+0x66>
 8002458:	6829      	ldr	r1, [r5, #0]
 800245a:	291d      	cmp	r1, #29
 800245c:	d82c      	bhi.n	80024b8 <__sflush_r+0xb8>
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <__sflush_r+0x108>)
 8002460:	40ca      	lsrs	r2, r1
 8002462:	07d6      	lsls	r6, r2, #31
 8002464:	d528      	bpl.n	80024b8 <__sflush_r+0xb8>
 8002466:	2200      	movs	r2, #0
 8002468:	6062      	str	r2, [r4, #4]
 800246a:	04d9      	lsls	r1, r3, #19
 800246c:	6922      	ldr	r2, [r4, #16]
 800246e:	6022      	str	r2, [r4, #0]
 8002470:	d504      	bpl.n	800247c <__sflush_r+0x7c>
 8002472:	1c42      	adds	r2, r0, #1
 8002474:	d101      	bne.n	800247a <__sflush_r+0x7a>
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	b903      	cbnz	r3, 800247c <__sflush_r+0x7c>
 800247a:	6560      	str	r0, [r4, #84]	; 0x54
 800247c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800247e:	602f      	str	r7, [r5, #0]
 8002480:	2900      	cmp	r1, #0
 8002482:	d0ca      	beq.n	800241a <__sflush_r+0x1a>
 8002484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002488:	4299      	cmp	r1, r3
 800248a:	d002      	beq.n	8002492 <__sflush_r+0x92>
 800248c:	4628      	mov	r0, r5
 800248e:	f000 f8fd 	bl	800268c <_free_r>
 8002492:	2000      	movs	r0, #0
 8002494:	6360      	str	r0, [r4, #52]	; 0x34
 8002496:	e7c1      	b.n	800241c <__sflush_r+0x1c>
 8002498:	6a21      	ldr	r1, [r4, #32]
 800249a:	2301      	movs	r3, #1
 800249c:	4628      	mov	r0, r5
 800249e:	47b0      	blx	r6
 80024a0:	1c41      	adds	r1, r0, #1
 80024a2:	d1c7      	bne.n	8002434 <__sflush_r+0x34>
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0c4      	beq.n	8002434 <__sflush_r+0x34>
 80024aa:	2b1d      	cmp	r3, #29
 80024ac:	d001      	beq.n	80024b2 <__sflush_r+0xb2>
 80024ae:	2b16      	cmp	r3, #22
 80024b0:	d101      	bne.n	80024b6 <__sflush_r+0xb6>
 80024b2:	602f      	str	r7, [r5, #0]
 80024b4:	e7b1      	b.n	800241a <__sflush_r+0x1a>
 80024b6:	89a3      	ldrh	r3, [r4, #12]
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	81a3      	strh	r3, [r4, #12]
 80024be:	e7ad      	b.n	800241c <__sflush_r+0x1c>
 80024c0:	690f      	ldr	r7, [r1, #16]
 80024c2:	2f00      	cmp	r7, #0
 80024c4:	d0a9      	beq.n	800241a <__sflush_r+0x1a>
 80024c6:	0793      	lsls	r3, r2, #30
 80024c8:	680e      	ldr	r6, [r1, #0]
 80024ca:	bf08      	it	eq
 80024cc:	694b      	ldreq	r3, [r1, #20]
 80024ce:	600f      	str	r7, [r1, #0]
 80024d0:	bf18      	it	ne
 80024d2:	2300      	movne	r3, #0
 80024d4:	eba6 0807 	sub.w	r8, r6, r7
 80024d8:	608b      	str	r3, [r1, #8]
 80024da:	f1b8 0f00 	cmp.w	r8, #0
 80024de:	dd9c      	ble.n	800241a <__sflush_r+0x1a>
 80024e0:	6a21      	ldr	r1, [r4, #32]
 80024e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024e4:	4643      	mov	r3, r8
 80024e6:	463a      	mov	r2, r7
 80024e8:	4628      	mov	r0, r5
 80024ea:	47b0      	blx	r6
 80024ec:	2800      	cmp	r0, #0
 80024ee:	dc06      	bgt.n	80024fe <__sflush_r+0xfe>
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f6:	81a3      	strh	r3, [r4, #12]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	e78e      	b.n	800241c <__sflush_r+0x1c>
 80024fe:	4407      	add	r7, r0
 8002500:	eba8 0800 	sub.w	r8, r8, r0
 8002504:	e7e9      	b.n	80024da <__sflush_r+0xda>
 8002506:	bf00      	nop
 8002508:	20400001 	.word	0x20400001

0800250c <_fflush_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	690b      	ldr	r3, [r1, #16]
 8002510:	4605      	mov	r5, r0
 8002512:	460c      	mov	r4, r1
 8002514:	b913      	cbnz	r3, 800251c <_fflush_r+0x10>
 8002516:	2500      	movs	r5, #0
 8002518:	4628      	mov	r0, r5
 800251a:	bd38      	pop	{r3, r4, r5, pc}
 800251c:	b118      	cbz	r0, 8002526 <_fflush_r+0x1a>
 800251e:	6983      	ldr	r3, [r0, #24]
 8002520:	b90b      	cbnz	r3, 8002526 <_fflush_r+0x1a>
 8002522:	f7ff fa15 	bl	8001950 <__sinit>
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <_fflush_r+0x6c>)
 8002528:	429c      	cmp	r4, r3
 800252a:	d11b      	bne.n	8002564 <_fflush_r+0x58>
 800252c:	686c      	ldr	r4, [r5, #4]
 800252e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ef      	beq.n	8002516 <_fflush_r+0xa>
 8002536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002538:	07d0      	lsls	r0, r2, #31
 800253a:	d404      	bmi.n	8002546 <_fflush_r+0x3a>
 800253c:	0599      	lsls	r1, r3, #22
 800253e:	d402      	bmi.n	8002546 <_fflush_r+0x3a>
 8002540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002542:	f7ff faa3 	bl	8001a8c <__retarget_lock_acquire_recursive>
 8002546:	4628      	mov	r0, r5
 8002548:	4621      	mov	r1, r4
 800254a:	f7ff ff59 	bl	8002400 <__sflush_r>
 800254e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002550:	07da      	lsls	r2, r3, #31
 8002552:	4605      	mov	r5, r0
 8002554:	d4e0      	bmi.n	8002518 <_fflush_r+0xc>
 8002556:	89a3      	ldrh	r3, [r4, #12]
 8002558:	059b      	lsls	r3, r3, #22
 800255a:	d4dd      	bmi.n	8002518 <_fflush_r+0xc>
 800255c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800255e:	f7ff fa96 	bl	8001a8e <__retarget_lock_release_recursive>
 8002562:	e7d9      	b.n	8002518 <_fflush_r+0xc>
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <_fflush_r+0x70>)
 8002566:	429c      	cmp	r4, r3
 8002568:	d101      	bne.n	800256e <_fflush_r+0x62>
 800256a:	68ac      	ldr	r4, [r5, #8]
 800256c:	e7df      	b.n	800252e <_fflush_r+0x22>
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <_fflush_r+0x74>)
 8002570:	429c      	cmp	r4, r3
 8002572:	bf08      	it	eq
 8002574:	68ec      	ldreq	r4, [r5, #12]
 8002576:	e7da      	b.n	800252e <_fflush_r+0x22>
 8002578:	080027f0 	.word	0x080027f0
 800257c:	08002810 	.word	0x08002810
 8002580:	080027d0 	.word	0x080027d0

08002584 <_lseek_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4d07      	ldr	r5, [pc, #28]	; (80025a4 <_lseek_r+0x20>)
 8002588:	4604      	mov	r4, r0
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	2200      	movs	r2, #0
 8002590:	602a      	str	r2, [r5, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	f7fe f9d6 	bl	8000944 <_lseek>
 8002598:	1c43      	adds	r3, r0, #1
 800259a:	d102      	bne.n	80025a2 <_lseek_r+0x1e>
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	b103      	cbz	r3, 80025a2 <_lseek_r+0x1e>
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	20000174 	.word	0x20000174

080025a8 <__swhatbuf_r>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	460e      	mov	r6, r1
 80025ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b0:	2900      	cmp	r1, #0
 80025b2:	b096      	sub	sp, #88	; 0x58
 80025b4:	4614      	mov	r4, r2
 80025b6:	461d      	mov	r5, r3
 80025b8:	da08      	bge.n	80025cc <__swhatbuf_r+0x24>
 80025ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	602a      	str	r2, [r5, #0]
 80025c2:	061a      	lsls	r2, r3, #24
 80025c4:	d410      	bmi.n	80025e8 <__swhatbuf_r+0x40>
 80025c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ca:	e00e      	b.n	80025ea <__swhatbuf_r+0x42>
 80025cc:	466a      	mov	r2, sp
 80025ce:	f000 f8bb 	bl	8002748 <_fstat_r>
 80025d2:	2800      	cmp	r0, #0
 80025d4:	dbf1      	blt.n	80025ba <__swhatbuf_r+0x12>
 80025d6:	9a01      	ldr	r2, [sp, #4]
 80025d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80025dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80025e0:	425a      	negs	r2, r3
 80025e2:	415a      	adcs	r2, r3
 80025e4:	602a      	str	r2, [r5, #0]
 80025e6:	e7ee      	b.n	80025c6 <__swhatbuf_r+0x1e>
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	2000      	movs	r0, #0
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	b016      	add	sp, #88	; 0x58
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025f4 <__smakebuf_r>:
 80025f4:	898b      	ldrh	r3, [r1, #12]
 80025f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025f8:	079d      	lsls	r5, r3, #30
 80025fa:	4606      	mov	r6, r0
 80025fc:	460c      	mov	r4, r1
 80025fe:	d507      	bpl.n	8002610 <__smakebuf_r+0x1c>
 8002600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002604:	6023      	str	r3, [r4, #0]
 8002606:	6123      	str	r3, [r4, #16]
 8002608:	2301      	movs	r3, #1
 800260a:	6163      	str	r3, [r4, #20]
 800260c:	b002      	add	sp, #8
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	ab01      	add	r3, sp, #4
 8002612:	466a      	mov	r2, sp
 8002614:	f7ff ffc8 	bl	80025a8 <__swhatbuf_r>
 8002618:	9900      	ldr	r1, [sp, #0]
 800261a:	4605      	mov	r5, r0
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff fa57 	bl	8001ad0 <_malloc_r>
 8002622:	b948      	cbnz	r0, 8002638 <__smakebuf_r+0x44>
 8002624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002628:	059a      	lsls	r2, r3, #22
 800262a:	d4ef      	bmi.n	800260c <__smakebuf_r+0x18>
 800262c:	f023 0303 	bic.w	r3, r3, #3
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	81a3      	strh	r3, [r4, #12]
 8002636:	e7e3      	b.n	8002600 <__smakebuf_r+0xc>
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <__smakebuf_r+0x7c>)
 800263a:	62b3      	str	r3, [r6, #40]	; 0x28
 800263c:	89a3      	ldrh	r3, [r4, #12]
 800263e:	6020      	str	r0, [r4, #0]
 8002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002644:	81a3      	strh	r3, [r4, #12]
 8002646:	9b00      	ldr	r3, [sp, #0]
 8002648:	6163      	str	r3, [r4, #20]
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	6120      	str	r0, [r4, #16]
 800264e:	b15b      	cbz	r3, 8002668 <__smakebuf_r+0x74>
 8002650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002654:	4630      	mov	r0, r6
 8002656:	f000 f889 	bl	800276c <_isatty_r>
 800265a:	b128      	cbz	r0, 8002668 <__smakebuf_r+0x74>
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	81a3      	strh	r3, [r4, #12]
 8002668:	89a0      	ldrh	r0, [r4, #12]
 800266a:	4305      	orrs	r5, r0
 800266c:	81a5      	strh	r5, [r4, #12]
 800266e:	e7cd      	b.n	800260c <__smakebuf_r+0x18>
 8002670:	080018e9 	.word	0x080018e9

08002674 <__malloc_lock>:
 8002674:	4801      	ldr	r0, [pc, #4]	; (800267c <__malloc_lock+0x8>)
 8002676:	f7ff ba09 	b.w	8001a8c <__retarget_lock_acquire_recursive>
 800267a:	bf00      	nop
 800267c:	20000168 	.word	0x20000168

08002680 <__malloc_unlock>:
 8002680:	4801      	ldr	r0, [pc, #4]	; (8002688 <__malloc_unlock+0x8>)
 8002682:	f7ff ba04 	b.w	8001a8e <__retarget_lock_release_recursive>
 8002686:	bf00      	nop
 8002688:	20000168 	.word	0x20000168

0800268c <_free_r>:
 800268c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800268e:	2900      	cmp	r1, #0
 8002690:	d044      	beq.n	800271c <_free_r+0x90>
 8002692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002696:	9001      	str	r0, [sp, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f1a1 0404 	sub.w	r4, r1, #4
 800269e:	bfb8      	it	lt
 80026a0:	18e4      	addlt	r4, r4, r3
 80026a2:	f7ff ffe7 	bl	8002674 <__malloc_lock>
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <_free_r+0x94>)
 80026a8:	9801      	ldr	r0, [sp, #4]
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	b933      	cbnz	r3, 80026bc <_free_r+0x30>
 80026ae:	6063      	str	r3, [r4, #4]
 80026b0:	6014      	str	r4, [r2, #0]
 80026b2:	b003      	add	sp, #12
 80026b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026b8:	f7ff bfe2 	b.w	8002680 <__malloc_unlock>
 80026bc:	42a3      	cmp	r3, r4
 80026be:	d908      	bls.n	80026d2 <_free_r+0x46>
 80026c0:	6825      	ldr	r5, [r4, #0]
 80026c2:	1961      	adds	r1, r4, r5
 80026c4:	428b      	cmp	r3, r1
 80026c6:	bf01      	itttt	eq
 80026c8:	6819      	ldreq	r1, [r3, #0]
 80026ca:	685b      	ldreq	r3, [r3, #4]
 80026cc:	1949      	addeq	r1, r1, r5
 80026ce:	6021      	streq	r1, [r4, #0]
 80026d0:	e7ed      	b.n	80026ae <_free_r+0x22>
 80026d2:	461a      	mov	r2, r3
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	b10b      	cbz	r3, 80026dc <_free_r+0x50>
 80026d8:	42a3      	cmp	r3, r4
 80026da:	d9fa      	bls.n	80026d2 <_free_r+0x46>
 80026dc:	6811      	ldr	r1, [r2, #0]
 80026de:	1855      	adds	r5, r2, r1
 80026e0:	42a5      	cmp	r5, r4
 80026e2:	d10b      	bne.n	80026fc <_free_r+0x70>
 80026e4:	6824      	ldr	r4, [r4, #0]
 80026e6:	4421      	add	r1, r4
 80026e8:	1854      	adds	r4, r2, r1
 80026ea:	42a3      	cmp	r3, r4
 80026ec:	6011      	str	r1, [r2, #0]
 80026ee:	d1e0      	bne.n	80026b2 <_free_r+0x26>
 80026f0:	681c      	ldr	r4, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	6053      	str	r3, [r2, #4]
 80026f6:	4421      	add	r1, r4
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	e7da      	b.n	80026b2 <_free_r+0x26>
 80026fc:	d902      	bls.n	8002704 <_free_r+0x78>
 80026fe:	230c      	movs	r3, #12
 8002700:	6003      	str	r3, [r0, #0]
 8002702:	e7d6      	b.n	80026b2 <_free_r+0x26>
 8002704:	6825      	ldr	r5, [r4, #0]
 8002706:	1961      	adds	r1, r4, r5
 8002708:	428b      	cmp	r3, r1
 800270a:	bf04      	itt	eq
 800270c:	6819      	ldreq	r1, [r3, #0]
 800270e:	685b      	ldreq	r3, [r3, #4]
 8002710:	6063      	str	r3, [r4, #4]
 8002712:	bf04      	itt	eq
 8002714:	1949      	addeq	r1, r1, r5
 8002716:	6021      	streq	r1, [r4, #0]
 8002718:	6054      	str	r4, [r2, #4]
 800271a:	e7ca      	b.n	80026b2 <_free_r+0x26>
 800271c:	b003      	add	sp, #12
 800271e:	bd30      	pop	{r4, r5, pc}
 8002720:	2000016c 	.word	0x2000016c

08002724 <_read_r>:
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	4d07      	ldr	r5, [pc, #28]	; (8002744 <_read_r+0x20>)
 8002728:	4604      	mov	r4, r0
 800272a:	4608      	mov	r0, r1
 800272c:	4611      	mov	r1, r2
 800272e:	2200      	movs	r2, #0
 8002730:	602a      	str	r2, [r5, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	f7fe f8e2 	bl	80008fc <_read>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_read_r+0x1e>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_read_r+0x1e>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20000174 	.word	0x20000174

08002748 <_fstat_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	4d07      	ldr	r5, [pc, #28]	; (8002768 <_fstat_r+0x20>)
 800274c:	2300      	movs	r3, #0
 800274e:	4604      	mov	r4, r0
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	602b      	str	r3, [r5, #0]
 8002756:	f7fe f8ee 	bl	8000936 <_fstat>
 800275a:	1c43      	adds	r3, r0, #1
 800275c:	d102      	bne.n	8002764 <_fstat_r+0x1c>
 800275e:	682b      	ldr	r3, [r5, #0]
 8002760:	b103      	cbz	r3, 8002764 <_fstat_r+0x1c>
 8002762:	6023      	str	r3, [r4, #0]
 8002764:	bd38      	pop	{r3, r4, r5, pc}
 8002766:	bf00      	nop
 8002768:	20000174 	.word	0x20000174

0800276c <_isatty_r>:
 800276c:	b538      	push	{r3, r4, r5, lr}
 800276e:	4d06      	ldr	r5, [pc, #24]	; (8002788 <_isatty_r+0x1c>)
 8002770:	2300      	movs	r3, #0
 8002772:	4604      	mov	r4, r0
 8002774:	4608      	mov	r0, r1
 8002776:	602b      	str	r3, [r5, #0]
 8002778:	f7fe f8e2 	bl	8000940 <_isatty>
 800277c:	1c43      	adds	r3, r0, #1
 800277e:	d102      	bne.n	8002786 <_isatty_r+0x1a>
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	b103      	cbz	r3, 8002786 <_isatty_r+0x1a>
 8002784:	6023      	str	r3, [r4, #0]
 8002786:	bd38      	pop	{r3, r4, r5, pc}
 8002788:	20000174 	.word	0x20000174

0800278c <_init>:
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	bf00      	nop
 8002790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002792:	bc08      	pop	{r3}
 8002794:	469e      	mov	lr, r3
 8002796:	4770      	bx	lr

08002798 <_fini>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr
